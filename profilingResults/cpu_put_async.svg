<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (783 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.13%)</title><rect x="10.0" y="1027.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="11.5" y="1027.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="11.5" y="1011.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="11.5" y="995.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="11.5" y="979.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="990.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.13%)</title><rect x="11.5" y="963.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="11.5" y="947.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.5" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="11.5" y="931.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="11.5" y="915.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="14.5" y="926.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (4 samples, 0.51%)</title><rect x="13.0" y="1027.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.0" y="1038.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.38%)</title><rect x="14.5" y="1011.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.5" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.13%)</title><rect x="16.0" y="995.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.0" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (1 samples, 0.13%)</title><rect x="16.0" y="979.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.0" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (1 samples, 0.13%)</title><rect x="17.5" y="995.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="20.5" y="1006.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.13%)</title><rect x="17.5" y="979.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.5" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (12 samples, 1.53%)</title><rect x="19.0" y="1027.0" width="18.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.0" y="1038.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (12 samples, 1.53%)</title><rect x="19.0" y="1011.0" width="18.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="22.0" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.13%)</title><rect x="23.6" y="995.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.6" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (1 samples, 0.13%)</title><rect x="23.6" y="979.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="26.6" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (8 samples, 1.02%)</title><rect x="25.1" y="995.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.1" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (7 samples, 0.89%)</title><rect x="25.1" y="979.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="28.1" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.38%)</title><rect x="28.1" y="963.0" width="4.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="31.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="28.1" y="947.0" width="4.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="31.1" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="28.1" y="931.0" width="4.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="31.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="28.1" y="915.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="31.1" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="28.1" y="899.0" width="4.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="31.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="28.1" y="883.0" width="4.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="31.1" y="867.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="34.1" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.13%)</title><rect x="32.6" y="963.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="35.6" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.13%)</title><rect x="34.1" y="963.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="37.1" y="974.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="35.6" y="979.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="38.6" y="990.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.38%)</title><rect x="37.1" y="1027.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="40.1" y="1038.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.13%)</title><rect x="37.1" y="1011.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="40.1" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.13%)</title><rect x="38.6" y="1011.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.6" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="40.1" y="1011.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="43.1" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.26%)</title><rect x="41.6" y="1027.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="44.6" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.13%)</title><rect x="41.6" y="1011.0" width="1.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="44.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="995.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="44.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="979.0" width="1.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="44.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="963.0" width="1.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="44.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="947.0" width="1.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="44.6" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="931.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="44.6" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="915.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="44.6" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="899.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="44.6" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="883.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="44.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="41.6" y="867.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="44.6" y="878.0"></text>
</g>
<g>
<title>__vsscanf (1 samples, 0.13%)</title><rect x="43.2" y="1011.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="46.2" y="1022.0"></text>
</g>
<g>
<title>__GI__IO_vfscanf (1 samples, 0.13%)</title><rect x="43.2" y="995.0" width="1.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="46.2" y="1006.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 1.66%)</title><rect x="44.7" y="1027.0" width="19.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="47.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="50.7" y="1011.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="53.7" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="50.7" y="995.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="53.7" y="1006.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (8 samples, 1.02%)</title><rect x="52.2" y="1011.0" width="12.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="55.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.89%)</title><rect x="53.7" y="995.0" width="10.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="56.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.89%)</title><rect x="53.7" y="979.0" width="10.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="56.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="55.2" y="963.0" width="9.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="58.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="55.2" y="947.0" width="9.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="58.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="55.2" y="931.0" width="9.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="58.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="55.2" y="915.0" width="9.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="58.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="55.2" y="899.0" width="9.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="58.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="55.2" y="883.0" width="9.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="58.2" y="894.0"></text>
</g>
<g>
<title>____strtoull_l_internal (1 samples, 0.13%)</title><rect x="64.3" y="1027.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="67.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (6 samples, 0.77%)</title><rect x="65.8" y="1027.0" width="9.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="68.8" y="1038.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="70.3" y="1011.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="73.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="70.3" y="995.0" width="4.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="73.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.26%)</title><rect x="71.8" y="979.0" width="3.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="74.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.26%)</title><rect x="71.8" y="963.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="74.8" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="73.3" y="947.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="76.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="73.3" y="931.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="76.3" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.13%)</title><rect x="74.8" y="1027.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="77.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.run (398 samples, 50.83%)</title><rect x="76.3" y="1027.0" width="599.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.3" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (398 samples, 50.83%)</title><rect x="76.3" y="1011.0" width="599.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.3" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (398 samples, 50.83%)</title><rect x="76.3" y="995.0" width="599.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.3" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (7 samples, 0.89%)</title><rect x="94.4" y="979.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.13%)</title><rect x="104.9" y="979.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.13%)</title><rect x="106.4" y="979.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="106.4" y="963.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.13%)</title><rect x="106.4" y="947.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.13%)</title><rect x="106.4" y="931.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.afterExecute (3 samples, 0.38%)</title><rect x="108.0" y="979.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.beforeExecute (1 samples, 0.13%)</title><rect x="112.5" y="979.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (108 samples, 13.79%)</title><rect x="114.0" y="979.0" width="162.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.0" y="990.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (108 samples, 13.79%)</title><rect x="114.0" y="963.0" width="162.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.0" y="974.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (87 samples, 11.11%)</title><rect x="118.5" y="947.0" width="131.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.5" y="958.0">java/util/concur..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.26%)</title><rect x="118.5" y="931.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.38%)</title><rect x="121.5" y="931.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (3 samples, 0.38%)</title><rect x="126.0" y="931.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.0" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.38%)</title><rect x="126.0" y="915.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="129.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.26%)</title><rect x="127.5" y="899.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.5" y="910.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.13%)</title><rect x="127.5" y="883.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="130.5" y="894.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.13%)</title><rect x="127.5" y="867.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="130.5" y="878.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.13%)</title><rect x="129.1" y="883.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="132.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.13%)</title><rect x="130.6" y="931.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.26%)</title><rect x="132.1" y="931.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="133.6" y="915.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.13%)</title><rect x="135.1" y="931.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.13%)</title><rect x="135.1" y="915.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="138.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (75 samples, 9.58%)</title><rect x="136.6" y="931.0" width="113.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.6" y="942.0">java/util/conc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (74 samples, 9.45%)</title><rect x="138.1" y="915.0" width="111.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.1" y="926.0">jdk/internal/..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.13%)</title><rect x="138.1" y="899.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="141.1" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.13%)</title><rect x="139.6" y="899.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="142.6" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (32 samples, 4.09%)</title><rect x="141.1" y="899.0" width="48.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="144.1" y="910.0">Unsa..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.13%)</title><rect x="144.1" y="883.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="147.1" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.13%)</title><rect x="145.6" y="883.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="148.6" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.89%)</title><rect x="147.1" y="883.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="150.1" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.13%)</title><rect x="150.2" y="867.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="153.2" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.51%)</title><rect x="151.7" y="867.0" width="6.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="154.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="157.7" y="883.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="160.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="157.7" y="867.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="160.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="157.7" y="851.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="160.7" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (15 samples, 1.92%)</title><rect x="159.2" y="883.0" width="22.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="162.2" y="894.0">_..</text>
</g>
<g>
<title>[unknown] (10 samples, 1.28%)</title><rect x="166.7" y="867.0" width="15.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="169.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 1.28%)</title><rect x="166.7" y="851.0" width="15.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="169.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="172.8" y="835.0" width="9.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="175.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="172.8" y="819.0" width="9.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="175.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.51%)</title><rect x="175.8" y="803.0" width="6.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="178.8" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.13%)</title><rect x="181.8" y="883.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="184.8" y="894.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.13%)</title><rect x="183.3" y="883.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="186.3" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.38%)</title><rect x="184.8" y="883.0" width="4.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="187.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 4.98%)</title><rect x="189.3" y="899.0" width="58.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="192.3" y="910.0">[unkno..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.38%)</title><rect x="189.3" y="883.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="192.3" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (29 samples, 3.70%)</title><rect x="193.9" y="883.0" width="43.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="196.9" y="894.0">__pt..</text>
</g>
<g>
<title>[unknown] (15 samples, 1.92%)</title><rect x="215.0" y="867.0" width="22.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="218.0" y="878.0">[..</text>
</g>
<g>
<title>[unknown] (15 samples, 1.92%)</title><rect x="215.0" y="851.0" width="22.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="218.0" y="862.0">[..</text>
</g>
<g>
<title>[unknown] (14 samples, 1.79%)</title><rect x="216.5" y="835.0" width="21.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="219.5" y="846.0">[..</text>
</g>
<g>
<title>[unknown] (14 samples, 1.79%)</title><rect x="216.5" y="819.0" width="21.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="219.5" y="830.0">[..</text>
</g>
<g>
<title>[unknown] (14 samples, 1.79%)</title><rect x="216.5" y="803.0" width="21.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="219.5" y="814.0">[..</text>
</g>
<g>
<title>[unknown] (14 samples, 1.79%)</title><rect x="216.5" y="787.0" width="21.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="219.5" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (12 samples, 1.53%)</title><rect x="219.5" y="771.0" width="18.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="222.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 1.40%)</title><rect x="221.0" y="755.0" width="16.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="224.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 1.40%)</title><rect x="221.0" y="739.0" width="16.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="224.0" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.38%)</title><rect x="237.6" y="883.0" width="4.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="240.6" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.38%)</title><rect x="242.1" y="883.0" width="4.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="245.1" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.13%)</title><rect x="246.6" y="883.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="249.6" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.13%)</title><rect x="248.1" y="899.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="251.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.13%)</title><rect x="249.6" y="947.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.13%)</title><rect x="249.6" y="931.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.13%)</title><rect x="249.6" y="915.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.13%)</title><rect x="249.6" y="899.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.13%)</title><rect x="249.6" y="883.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.6" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.13%)</title><rect x="249.6" y="867.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.6" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.13%)</title><rect x="249.6" y="851.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.6" y="862.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.13%)</title><rect x="249.6" y="835.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.26%)</title><rect x="251.1" y="947.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.26%)</title><rect x="251.1" y="931.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.26%)</title><rect x="251.1" y="915.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.26%)</title><rect x="251.1" y="899.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.26%)</title><rect x="251.1" y="883.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.92%)</title><rect x="254.1" y="947.0" width="22.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.1" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.92%)</title><rect x="254.1" y="931.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.1" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.66%)</title><rect x="254.1" y="915.0" width="19.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.66%)</title><rect x="254.1" y="899.0" width="19.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.1" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 1.66%)</title><rect x="254.1" y="883.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.1" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.51%)</title><rect x="254.1" y="867.0" width="6.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="257.1" y="878.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="254.1" y="851.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="257.1" y="862.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.13%)</title><rect x="255.6" y="851.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="258.6" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.13%)</title><rect x="257.2" y="851.0" width="1.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="260.2" y="862.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.13%)</title><rect x="258.7" y="851.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="261.7" y="862.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (9 samples, 1.15%)</title><rect x="260.2" y="867.0" width="13.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="263.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 1.02%)</title><rect x="261.7" y="851.0" width="12.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="264.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 1.02%)</title><rect x="261.7" y="835.0" width="12.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="264.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.89%)</title><rect x="263.2" y="819.0" width="10.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="266.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.89%)</title><rect x="263.2" y="803.0" width="10.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="266.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.89%)</title><rect x="263.2" y="787.0" width="10.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="266.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="264.7" y="771.0" width="9.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="267.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.64%)</title><rect x="266.2" y="755.0" width="7.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="269.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.64%)</title><rect x="266.2" y="739.0" width="7.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="269.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.13%)</title><rect x="273.7" y="915.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.7" y="926.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.13%)</title><rect x="275.2" y="915.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="278.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.13%)</title><rect x="276.7" y="979.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.13%)</title><rect x="278.3" y="979.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService$$Lambda$65/895145215.run (263 samples, 33.59%)</title><rect x="279.8" y="979.0" width="396.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.8" y="990.0">ru/mail/polis/service/AsyncHttpService$$Lambda$65/8951..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.lambda$executeAsync$3 (263 samples, 33.59%)</title><rect x="279.8" y="963.0" width="396.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.8" y="974.0">ru/mail/polis/service/AsyncHttpService.lambda$executeA..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (137 samples, 17.50%)</title><rect x="279.8" y="947.0" width="206.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.8" y="958.0">one/nio/http/HttpSession.se..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.13%)</title><rect x="284.3" y="931.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.3" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.13%)</title><rect x="284.3" y="915.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.3" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.13%)</title><rect x="284.3" y="899.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.3" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (128 samples, 16.35%)</title><rect x="285.8" y="931.0" width="192.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.8" y="942.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.51%)</title><rect x="285.8" y="915.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.8" y="926.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.38%)</title><rect x="287.3" y="899.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.3" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.13%)</title><rect x="287.3" y="883.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.3" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.26%)</title><rect x="288.8" y="883.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="291.8" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.26%)</title><rect x="288.8" y="867.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (124 samples, 15.84%)</title><rect x="291.8" y="915.0" width="186.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.8" y="926.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (123 samples, 15.71%)</title><rect x="293.3" y="899.0" width="185.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.3" y="910.0">one/nio/net/Session.write</text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="294.8" y="883.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="297.8" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="294.8" y="867.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="297.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.remaining (1 samples, 0.13%)</title><rect x="296.3" y="883.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.3" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (119 samples, 15.20%)</title><rect x="297.8" y="883.0" width="179.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.8" y="894.0">one/nio/net/Session$Arr..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (118 samples, 15.07%)</title><rect x="299.3" y="867.0" width="177.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.3" y="878.0">one/nio/net/NativeSocke..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.13%)</title><rect x="300.9" y="851.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="303.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.26%)</title><rect x="302.4" y="851.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="305.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.26%)</title><rect x="302.4" y="835.0" width="3.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="305.4" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.13%)</title><rect x="302.4" y="819.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="305.4" y="830.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.13%)</title><rect x="302.4" y="803.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="305.4" y="814.0"></text>
</g>
<g>
<title>__send (1 samples, 0.13%)</title><rect x="303.9" y="819.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="306.9" y="830.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.13%)</title><rect x="305.4" y="851.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="308.4" y="862.0"></text>
</g>
<g>
<title>__send (113 samples, 14.43%)</title><rect x="306.9" y="851.0" width="170.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="309.9" y="862.0">__send</text>
</g>
<g>
<title>[unknown] (110 samples, 14.05%)</title><rect x="311.4" y="835.0" width="165.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="314.4" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (110 samples, 14.05%)</title><rect x="311.4" y="819.0" width="165.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="314.4" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (104 samples, 13.28%)</title><rect x="320.4" y="803.0" width="156.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="323.4" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (104 samples, 13.28%)</title><rect x="320.4" y="787.0" width="156.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="323.4" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (101 samples, 12.90%)</title><rect x="325.0" y="771.0" width="152.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="328.0" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (101 samples, 12.90%)</title><rect x="325.0" y="755.0" width="152.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="328.0" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (101 samples, 12.90%)</title><rect x="325.0" y="739.0" width="152.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="328.0" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (99 samples, 12.64%)</title><rect x="328.0" y="723.0" width="149.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="331.0" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (93 samples, 11.88%)</title><rect x="337.0" y="707.0" width="140.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="340.0" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (88 samples, 11.24%)</title><rect x="344.6" y="691.0" width="132.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="347.6" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (87 samples, 11.11%)</title><rect x="346.1" y="675.0" width="131.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="349.1" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 10.22%)</title><rect x="356.6" y="659.0" width="120.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="359.6" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (78 samples, 9.96%)</title><rect x="359.6" y="643.0" width="117.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="362.6" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (76 samples, 9.71%)</title><rect x="362.6" y="627.0" width="114.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="365.6" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (74 samples, 9.45%)</title><rect x="365.7" y="611.0" width="111.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="368.7" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (74 samples, 9.45%)</title><rect x="365.7" y="595.0" width="111.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="368.7" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (72 samples, 9.20%)</title><rect x="368.7" y="579.0" width="108.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="371.7" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (72 samples, 9.20%)</title><rect x="368.7" y="563.0" width="108.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="371.7" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (70 samples, 8.94%)</title><rect x="371.7" y="547.0" width="105.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="374.7" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (70 samples, 8.94%)</title><rect x="371.7" y="531.0" width="105.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="374.7" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (68 samples, 8.68%)</title><rect x="374.7" y="515.0" width="102.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="377.7" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (66 samples, 8.43%)</title><rect x="377.7" y="499.0" width="99.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="380.7" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (61 samples, 7.79%)</title><rect x="385.2" y="483.0" width="92.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="388.2" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (58 samples, 7.41%)</title><rect x="389.8" y="467.0" width="87.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="392.8" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (58 samples, 7.41%)</title><rect x="389.8" y="451.0" width="87.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="392.8" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (57 samples, 7.28%)</title><rect x="391.3" y="435.0" width="85.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="394.3" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (56 samples, 7.15%)</title><rect x="392.8" y="419.0" width="84.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="395.8" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (55 samples, 7.02%)</title><rect x="394.3" y="403.0" width="82.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="397.3" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (51 samples, 6.51%)</title><rect x="400.3" y="387.0" width="76.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="403.3" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (51 samples, 6.51%)</title><rect x="400.3" y="371.0" width="76.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="403.3" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (50 samples, 6.39%)</title><rect x="401.8" y="355.0" width="75.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="404.8" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (47 samples, 6.00%)</title><rect x="406.3" y="339.0" width="70.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="409.3" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (43 samples, 5.49%)</title><rect x="412.4" y="323.0" width="64.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="415.4" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (40 samples, 5.11%)</title><rect x="416.9" y="307.0" width="60.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="419.9" y="318.0">[unkno..</text>
</g>
<g>
<title>[unknown] (39 samples, 4.98%)</title><rect x="418.4" y="291.0" width="58.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="421.4" y="302.0">[unkno..</text>
</g>
<g>
<title>[unknown] (28 samples, 3.58%)</title><rect x="435.0" y="275.0" width="42.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="438.0" y="286.0">[unk..</text>
</g>
<g>
<title>[unknown] (22 samples, 2.81%)</title><rect x="444.0" y="259.0" width="33.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="447.0" y="270.0">[u..</text>
</g>
<g>
<title>[unknown] (19 samples, 2.43%)</title><rect x="448.5" y="243.0" width="28.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="451.5" y="254.0">[u..</text>
</g>
<g>
<title>[unknown] (18 samples, 2.30%)</title><rect x="450.1" y="227.0" width="27.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="453.1" y="238.0">[..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="475.7" y="211.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="478.7" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="477.2" y="883.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="480.2" y="894.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.13%)</title><rect x="477.2" y="867.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="480.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="477.2" y="851.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="480.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.51%)</title><rect x="478.7" y="931.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.7" y="942.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.13%)</title><rect x="480.2" y="915.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.26%)</title><rect x="481.7" y="915.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.7" y="926.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.13%)</title><rect x="483.2" y="899.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.13%)</title><rect x="483.2" y="883.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="486.2" y="894.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (1 samples, 0.13%)</title><rect x="484.7" y="931.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="487.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.13%)</title><rect x="484.7" y="915.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="487.7" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService$$Lambda$61/763238989.act (126 samples, 16.09%)</title><rect x="486.2" y="947.0" width="189.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="489.2" y="958.0">ru/mail/polis/service/Asy..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.lambda$entity$1 (126 samples, 16.09%)</title><rect x="486.2" y="931.0" width="189.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.2" y="942.0">ru/mail/polis/service/Asy..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.putMethodWrapper (126 samples, 16.09%)</title><rect x="486.2" y="915.0" width="189.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.2" y="926.0">ru/mail/polis/service/Asy..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.38%)</title><rect x="486.2" y="899.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.2" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.26%)</title><rect x="487.7" y="883.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.7" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.26%)</title><rect x="487.7" y="867.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="490.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.26%)</title><rect x="487.7" y="851.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.7" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="487.7" y="835.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="490.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.upsert (1 samples, 0.13%)</title><rect x="489.2" y="835.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="492.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.upsert (121 samples, 15.45%)</title><rect x="490.7" y="899.0" width="182.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="493.7" y="910.0">ru/mail/polis/dao/DAORoc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (107 samples, 13.67%)</title><rect x="492.2" y="883.0" width="161.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="495.2" y="894.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (106 samples, 13.54%)</title><rect x="493.8" y="867.0" width="159.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.8" y="878.0">org/rocksdb/RocksDB...</text>
</g>
<g>
<title>__libc_free (1 samples, 0.13%)</title><rect x="493.8" y="851.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="496.8" y="862.0"></text>
</g>
<g>
<title>_init (1 samples, 0.13%)</title><rect x="495.3" y="851.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="498.3" y="862.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.13%)</title><rect x="496.8" y="851.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="499.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="498.3" y="851.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="501.3" y="862.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (101 samples, 12.90%)</title><rect x="499.8" y="851.0" width="152.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="502.8" y="862.0">rocksdb_put_helper(..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="505.8" y="835.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="508.8" y="846.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.89%)</title><rect x="507.3" y="835.0" width="10.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="510.3" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.13%)</title><rect x="511.8" y="819.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="514.8" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.26%)</title><rect x="513.3" y="819.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="516.3" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.13%)</title><rect x="516.4" y="819.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="519.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (87 samples, 11.11%)</title><rect x="517.9" y="835.0" width="131.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.9" y="846.0">rocksdb::DB::Put..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.26%)</title><rect x="517.9" y="819.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="520.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (85 samples, 10.86%)</title><rect x="520.9" y="819.0" width="128.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="523.9" y="830.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (83 samples, 10.60%)</title><rect x="520.9" y="803.0" width="125.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="523.9" y="814.0">rocksdb::DB::Pu..</text>
</g>
<g>
<title>__libc_free (1 samples, 0.13%)</title><rect x="520.9" y="787.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="523.9" y="798.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.13%)</title><rect x="522.4" y="787.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="525.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.13%)</title><rect x="523.9" y="787.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="526.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (74 samples, 9.45%)</title><rect x="525.4" y="787.0" width="111.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="528.4" y="798.0">rocksdb::DBIm..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.13%)</title><rect x="525.4" y="771.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="528.4" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="526.9" y="771.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="529.9" y="782.0"></text>
</g>
<g>
<title>_init (2 samples, 0.26%)</title><rect x="528.4" y="771.0" width="3.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="531.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.13%)</title><rect x="531.4" y="771.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="534.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (65 samples, 8.30%)</title><rect x="532.9" y="771.0" width="98.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="535.9" y="782.0">rocksdb::DB..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="548.0" y="755.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="551.0" y="766.0"></text>
</g>
<g>
<title>_init (3 samples, 0.38%)</title><rect x="549.5" y="755.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="552.5" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.13%)</title><rect x="554.0" y="755.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="557.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.26%)</title><rect x="555.5" y="755.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="558.5" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.13%)</title><rect x="555.5" y="739.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="558.5" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.13%)</title><rect x="557.0" y="739.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="560.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (1 samples, 0.13%)</title><rect x="558.6" y="755.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (46 samples, 5.87%)</title><rect x="560.1" y="755.0" width="69.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="563.1" y="766.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="564.6" y="739.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (41 samples, 5.24%)</title><rect x="566.1" y="739.0" width="61.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="569.1" y="750.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (37 samples, 4.73%)</title><rect x="570.6" y="723.0" width="55.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="573.6" y="734.0">rocks..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (37 samples, 4.73%)</title><rect x="570.6" y="707.0" width="55.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="573.6" y="718.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni3468099510396286304.so (4 samples, 0.51%)</title><rect x="573.6" y="691.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="576.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (28 samples, 3.58%)</title><rect x="579.7" y="691.0" width="42.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="582.7" y="702.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni3468099510396286304.so (4 samples, 0.51%)</title><rect x="585.7" y="675.0" width="6.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="588.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.38%)</title><rect x="587.2" y="659.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="590.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="591.7" y="675.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="594.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="591.7" y="659.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="594.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="591.7" y="643.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="594.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="591.7" y="627.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="594.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="591.7" y="611.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="594.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="591.7" y="595.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="594.7" y="606.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (12 samples, 1.53%)</title><rect x="593.2" y="675.0" width="18.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="596.2" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3468099510396286304.so (12 samples, 1.53%)</title><rect x="593.2" y="659.0" width="18.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="596.2" y="670.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3468099510396286304.so (5 samples, 0.64%)</title><rect x="599.2" y="643.0" width="7.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="602.2" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="599.2" y="627.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="602.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.51%)</title><rect x="600.8" y="627.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.38%)</title><rect x="606.8" y="643.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="609.8" y="654.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (3 samples, 0.38%)</title><rect x="606.8" y="627.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="609.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.38%)</title><rect x="611.3" y="675.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="614.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() const (1 samples, 0.13%)</title><rect x="615.8" y="675.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="618.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.38%)</title><rect x="617.3" y="675.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="620.3" y="686.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni3468099510396286304.so (2 samples, 0.26%)</title><rect x="617.3" y="659.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="620.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() const (1 samples, 0.13%)</title><rect x="620.3" y="659.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.13%)</title><rect x="621.9" y="691.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="624.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (1 samples, 0.13%)</title><rect x="623.4" y="691.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.13%)</title><rect x="624.9" y="691.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="627.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.13%)</title><rect x="626.4" y="723.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="629.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.13%)</title><rect x="627.9" y="739.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="630.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (1 samples, 0.13%)</title><rect x="629.4" y="755.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="632.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.13%)</title><rect x="630.9" y="771.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.13%)</title><rect x="632.4" y="771.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="635.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.26%)</title><rect x="633.9" y="771.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="636.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.26%)</title><rect x="636.9" y="787.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.9" y="798.0"></text>
</g>
<g>
<title>_init (1 samples, 0.13%)</title><rect x="636.9" y="771.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="639.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="638.4" y="771.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="641.4" y="782.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.13%)</title><rect x="638.4" y="755.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.4" y="766.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (2 samples, 0.26%)</title><rect x="639.9" y="787.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="642.9" y="798.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (2 samples, 0.26%)</title><rect x="643.0" y="787.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="646.0" y="803.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="649.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.13%)</title><rect x="647.5" y="803.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="650.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.13%)</title><rect x="649.0" y="835.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="652.0" y="846.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.13%)</title><rect x="650.5" y="835.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="653.5" y="846.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.13%)</title><rect x="652.0" y="851.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="655.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.copyAndExtractFromByteBuffer (4 samples, 0.51%)</title><rect x="653.5" y="883.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.5" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.13%)</title><rect x="653.5" y="867.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="656.5" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.26%)</title><rect x="655.0" y="867.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="658.0" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.26%)</title><rect x="655.0" y="851.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.0" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.13%)</title><rect x="658.0" y="867.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="661.0" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.13%)</title><rect x="658.0" y="851.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.13%)</title><rect x="658.0" y="835.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.0" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.13%)</title><rect x="658.0" y="819.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.13%)</title><rect x="658.0" y="803.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.0" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.13%)</title><rect x="658.0" y="787.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.0" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.13%)</title><rect x="658.0" y="771.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="661.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.decompressKey (9 samples, 1.15%)</title><rect x="659.5" y="883.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.5" y="894.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.13%)</title><rect x="661.0" y="867.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="664.0" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.13%)</title><rect x="662.5" y="867.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.5" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.13%)</title><rect x="662.5" y="851.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="665.5" y="862.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.13%)</title><rect x="662.5" y="835.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="665.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.copyAndExtractFromByteBuffer (6 samples, 0.77%)</title><rect x="664.0" y="867.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.0" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.26%)</title><rect x="665.6" y="851.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.6" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.26%)</title><rect x="665.6" y="835.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.6" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.13%)</title><rect x="665.6" y="819.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.6" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="667.1" y="819.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="670.1" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.38%)</title><rect x="668.6" y="851.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="671.6" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.13%)</title><rect x="671.6" y="835.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.6" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.13%)</title><rect x="671.6" y="819.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.responseWrapper (2 samples, 0.26%)</title><rect x="673.1" y="899.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.1" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.13%)</title><rect x="674.6" y="883.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.6" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (222 samples, 28.35%)</title><rect x="676.1" y="1027.0" width="334.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.1" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.13%)</title><rect x="727.3" y="1011.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="730.3" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (61 samples, 7.79%)</title><rect x="728.9" y="1011.0" width="91.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.9" y="1022.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 0.51%)</title><rect x="734.9" y="995.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.13%)</title><rect x="737.9" y="979.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.9" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.13%)</title><rect x="739.4" y="979.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.4" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (53 samples, 6.77%)</title><rect x="740.9" y="995.0" width="79.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="743.9" y="1006.0">one/nio/n..</text>
</g>
<g>
<title>[unknown] (46 samples, 5.87%)</title><rect x="746.9" y="979.0" width="69.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="749.9" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2 samples, 0.26%)</title><rect x="746.9" y="963.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="749.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="746.9" y="947.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="749.9" y="958.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.13%)</title><rect x="748.4" y="947.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="751.4" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="748.4" y="931.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="751.4" y="942.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.26%)</title><rect x="749.9" y="963.0" width="3.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="752.9" y="974.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.13%)</title><rect x="753.0" y="963.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="756.0" y="974.0"></text>
</g>
<g>
<title>epoll_wait (41 samples, 5.24%)</title><rect x="754.5" y="963.0" width="61.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="757.5" y="974.0">epoll_..</text>
</g>
<g>
<title>[unknown] (32 samples, 4.09%)</title><rect x="768.0" y="947.0" width="48.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="771.0" y="958.0">[unk..</text>
</g>
<g>
<title>[unknown] (32 samples, 4.09%)</title><rect x="768.0" y="931.0" width="48.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="771.0" y="942.0">[unk..</text>
</g>
<g>
<title>[unknown] (32 samples, 4.09%)</title><rect x="768.0" y="915.0" width="48.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="771.0" y="926.0">[unk..</text>
</g>
<g>
<title>[unknown] (32 samples, 4.09%)</title><rect x="768.0" y="899.0" width="48.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="771.0" y="910.0">[unk..</text>
</g>
<g>
<title>[unknown] (32 samples, 4.09%)</title><rect x="768.0" y="883.0" width="48.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="771.0" y="894.0">[unk..</text>
</g>
<g>
<title>[unknown] (29 samples, 3.70%)</title><rect x="772.6" y="867.0" width="43.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="775.6" y="878.0">[unk..</text>
</g>
<g>
<title>[unknown] (22 samples, 2.81%)</title><rect x="783.1" y="851.0" width="33.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="786.1" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (20 samples, 2.55%)</title><rect x="786.1" y="835.0" width="30.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="789.1" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (17 samples, 2.17%)</title><rect x="790.6" y="819.0" width="25.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="793.6" y="830.0">[..</text>
</g>
<g>
<title>[unknown] (12 samples, 1.53%)</title><rect x="798.2" y="803.0" width="18.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="801.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="814.8" y="787.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="817.8" y="798.0"></text>
</g>
<g>
<title>epoll_wait (3 samples, 0.38%)</title><rect x="816.3" y="979.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="819.3" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (126 samples, 16.09%)</title><rect x="820.8" y="1011.0" width="189.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.8" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.13%)</title><rect x="822.3" y="995.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="825.3" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (121 samples, 15.45%)</title><rect x="823.8" y="995.0" width="182.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="826.8" y="1006.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (87 samples, 11.11%)</title><rect x="823.8" y="979.0" width="131.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.8" y="990.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (67 samples, 8.56%)</title><rect x="828.3" y="963.0" width="101.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.3" y="974.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (66 samples, 8.43%)</title><rect x="829.8" y="947.0" width="99.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.8" y="958.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.26%)</title><rect x="829.8" y="931.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.13%)</title><rect x="831.3" y="915.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.3" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.13%)</title><rect x="831.3" y="899.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.13%)</title><rect x="831.3" y="883.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.3" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.handleDefault (64 samples, 8.17%)</title><rect x="832.8" y="931.0" width="96.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.8" y="942.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.26%)</title><rect x="834.3" y="915.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.3" y="926.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.13%)</title><rect x="835.8" y="899.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.8" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.13%)</title><rect x="835.8" y="883.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="838.8" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.13%)</title><rect x="835.8" y="867.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="838.8" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.entity (61 samples, 7.79%)</title><rect x="837.4" y="915.0" width="91.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="840.4" y="926.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.51%)</title><rect x="837.4" y="899.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="840.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.51%)</title><rect x="837.4" y="883.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="840.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.13%)</title><rect x="841.9" y="867.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="844.9" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.38%)</title><rect x="843.4" y="899.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="846.4" y="910.0"></text>
</g>
<g>
<title>_invokeBasic (1 samples, 0.13%)</title><rect x="843.4" y="883.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="846.4" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.26%)</title><rect x="844.9" y="883.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="847.9" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService$$Lambda$61/763238989.get$Lambda (2 samples, 0.26%)</title><rect x="844.9" y="867.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.9" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService$$Lambda$61/763238989.&lt;init&gt; (1 samples, 0.13%)</title><rect x="846.4" y="851.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.89%)</title><rect x="847.9" y="899.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.26%)</title><rect x="847.9" y="883.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.26%)</title><rect x="847.9" y="867.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.13%)</title><rect x="850.9" y="883.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.26%)</title><rect x="852.4" y="883.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.26%)</title><rect x="852.4" y="867.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.4" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.13%)</title><rect x="853.9" y="851.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.9" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.26%)</title><rect x="855.4" y="883.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="858.4" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.26%)</title><rect x="855.4" y="867.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="858.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.26%)</title><rect x="855.4" y="851.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.26%)</title><rect x="855.4" y="835.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.executeAsync (47 samples, 6.00%)</title><rect x="858.5" y="899.0" width="70.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.5" y="910.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.13%)</title><rect x="858.5" y="883.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.5" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.13%)</title><rect x="858.5" y="867.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="861.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (46 samples, 5.87%)</title><rect x="860.0" y="883.0" width="69.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.0" y="894.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (44 samples, 5.62%)</title><rect x="863.0" y="867.0" width="66.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="866.0" y="878.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (39 samples, 4.98%)</title><rect x="863.0" y="851.0" width="58.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="866.0" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.13%)</title><rect x="863.0" y="835.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="866.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.13%)</title><rect x="863.0" y="819.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.13%)</title><rect x="863.0" y="803.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="866.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.13%)</title><rect x="863.0" y="787.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="866.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.13%)</title><rect x="863.0" y="771.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.0" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.13%)</title><rect x="863.0" y="755.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.13%)</title><rect x="863.0" y="739.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="866.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.26%)</title><rect x="864.5" y="835.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.26%)</title><rect x="864.5" y="819.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="867.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.26%)</title><rect x="864.5" y="803.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.26%)</title><rect x="864.5" y="787.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.26%)</title><rect x="864.5" y="771.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.26%)</title><rect x="864.5" y="755.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (36 samples, 4.60%)</title><rect x="867.5" y="835.0" width="54.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.5" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (36 samples, 4.60%)</title><rect x="867.5" y="819.0" width="54.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.5" y="830.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (36 samples, 4.60%)</title><rect x="867.5" y="803.0" width="54.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.5" y="814.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (36 samples, 4.60%)</title><rect x="867.5" y="787.0" width="54.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.5" y="798.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (36 samples, 4.60%)</title><rect x="867.5" y="771.0" width="54.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.5" y="782.0">jdk/i..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.26%)</title><rect x="867.5" y="755.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.5" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.13%)</title><rect x="870.5" y="755.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="873.5" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.51%)</title><rect x="872.0" y="755.0" width="6.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="875.0" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.13%)</title><rect x="872.0" y="739.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="875.0" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.26%)</title><rect x="873.5" y="739.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.5" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.13%)</title><rect x="876.5" y="739.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="879.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.13%)</title><rect x="878.0" y="755.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="881.0" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.26%)</title><rect x="879.6" y="755.0" width="3.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="882.6" y="766.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (26 samples, 3.32%)</title><rect x="882.6" y="755.0" width="39.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="885.6" y="766.0">pth..</text>
</g>
<g>
<title>[unknown] (25 samples, 3.19%)</title><rect x="884.1" y="739.0" width="37.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="887.1" y="750.0">[un..</text>
</g>
<g>
<title>[unknown] (25 samples, 3.19%)</title><rect x="884.1" y="723.0" width="37.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="887.1" y="734.0">[un..</text>
</g>
<g>
<title>[unknown] (23 samples, 2.94%)</title><rect x="887.1" y="707.0" width="34.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="890.1" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (23 samples, 2.94%)</title><rect x="887.1" y="691.0" width="34.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="890.1" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (23 samples, 2.94%)</title><rect x="887.1" y="675.0" width="34.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="890.1" y="686.0">[u..</text>
</g>
<g>
<title>[unknown] (21 samples, 2.68%)</title><rect x="890.1" y="659.0" width="31.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="893.1" y="670.0">[u..</text>
</g>
<g>
<title>[unknown] (20 samples, 2.55%)</title><rect x="891.6" y="643.0" width="30.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="894.6" y="654.0">[u..</text>
</g>
<g>
<title>[unknown] (20 samples, 2.55%)</title><rect x="891.6" y="627.0" width="30.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="894.6" y="638.0">[u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="921.7" y="851.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="924.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.38%)</title><rect x="923.3" y="851.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.38%)</title><rect x="923.3" y="835.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.13%)</title><rect x="924.8" y="819.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.13%)</title><rect x="926.3" y="819.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="929.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.13%)</title><rect x="926.3" y="803.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="929.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.13%)</title><rect x="927.8" y="851.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="930.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="927.8" y="835.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="930.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.13%)</title><rect x="927.8" y="819.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 1.28%)</title><rect x="929.3" y="963.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (4 samples, 0.51%)</title><rect x="930.8" y="947.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.8" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.38%)</title><rect x="936.8" y="947.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.8" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.26%)</title><rect x="938.3" y="931.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="941.3" y="942.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.13%)</title><rect x="939.8" y="915.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="942.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.13%)</title><rect x="939.8" y="899.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.8" y="910.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.13%)</title><rect x="939.8" y="883.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="942.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.13%)</title><rect x="939.8" y="867.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="942.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.26%)</title><rect x="941.3" y="947.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="944.3" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.13%)</title><rect x="944.4" y="963.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.4" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.51%)</title><rect x="945.9" y="963.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="948.9" y="974.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.51%)</title><rect x="945.9" y="947.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="948.9" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.51%)</title><rect x="945.9" y="931.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.9" y="942.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.26%)</title><rect x="947.4" y="915.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.4" y="926.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.13%)</title><rect x="950.4" y="915.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.4" y="926.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.13%)</title><rect x="950.4" y="899.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="953.4" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.26%)</title><rect x="951.9" y="963.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="954.9" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.26%)</title><rect x="951.9" y="947.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="954.9" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="953.4" y="931.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="956.4" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (34 samples, 4.34%)</title><rect x="954.9" y="979.0" width="51.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.9" y="990.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (34 samples, 4.34%)</title><rect x="954.9" y="963.0" width="51.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.9" y="974.0">one/n..</text>
</g>
<g>
<title>[unknown] (9 samples, 1.15%)</title><rect x="956.4" y="947.0" width="13.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="959.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 1.15%)</title><rect x="956.4" y="931.0" width="13.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="959.4" y="942.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (7 samples, 0.89%)</title><rect x="956.4" y="915.0" width="10.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="959.4" y="926.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="956.4" y="899.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.4" y="910.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.64%)</title><rect x="957.9" y="899.0" width="7.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="960.9" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.26%)</title><rect x="959.4" y="883.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.4" y="894.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.26%)</title><rect x="962.4" y="883.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="965.4" y="894.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.13%)</title><rect x="965.5" y="899.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="968.5" y="910.0"></text>
</g>
<g>
<title>__GI___recv (2 samples, 0.26%)</title><rect x="967.0" y="915.0" width="3.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="970.0" y="926.0"></text>
</g>
<g>
<title>__GI___recv (24 samples, 3.07%)</title><rect x="970.0" y="947.0" width="36.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="973.0" y="958.0">__G..</text>
</g>
<g>
<title>[unknown] (23 samples, 2.94%)</title><rect x="971.5" y="931.0" width="34.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="974.5" y="942.0">[u..</text>
</g>
<g>
<title>[unknown] (23 samples, 2.94%)</title><rect x="971.5" y="915.0" width="34.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="974.5" y="926.0">[u..</text>
</g>
<g>
<title>[unknown] (21 samples, 2.68%)</title><rect x="974.5" y="899.0" width="31.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="977.5" y="910.0">[u..</text>
</g>
<g>
<title>[unknown] (21 samples, 2.68%)</title><rect x="974.5" y="883.0" width="31.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="977.5" y="894.0">[u..</text>
</g>
<g>
<title>[unknown] (19 samples, 2.43%)</title><rect x="977.5" y="867.0" width="28.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="980.5" y="878.0">[u..</text>
</g>
<g>
<title>[unknown] (18 samples, 2.30%)</title><rect x="979.0" y="851.0" width="27.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="982.0" y="862.0">[..</text>
</g>
<g>
<title>[unknown] (16 samples, 2.04%)</title><rect x="982.0" y="835.0" width="24.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="985.0" y="846.0">[..</text>
</g>
<g>
<title>[unknown] (11 samples, 1.40%)</title><rect x="989.6" y="819.0" width="16.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="992.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 1.28%)</title><rect x="991.1" y="803.0" width="15.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="994.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.77%)</title><rect x="997.1" y="787.0" width="9.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1000.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.64%)</title><rect x="998.6" y="771.0" width="7.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1001.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.38%)</title><rect x="1001.6" y="755.0" width="4.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1004.6" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.38%)</title><rect x="1006.1" y="995.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.1" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="979.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1012.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="963.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1012.2" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="947.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1012.2" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="931.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1012.2" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="915.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1012.2" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="899.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1012.2" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="883.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1012.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="867.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1012.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="851.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1012.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="835.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1012.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1009.2" y="819.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1012.2" y="830.0"></text>
</g>
<g>
<title>start_thread (119 samples, 15.20%)</title><rect x="1010.7" y="1027.0" width="179.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1013.7" y="1038.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (119 samples, 15.20%)</title><rect x="1010.7" y="1011.0" width="179.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1013.7" y="1022.0">thread_native_entry(Thr..</text>
</g>
<g>
<title>Thread::call_run() (119 samples, 15.20%)</title><rect x="1010.7" y="995.0" width="179.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.7" y="1006.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.13%)</title><rect x="1010.7" y="979.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.7" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.13%)</title><rect x="1010.7" y="963.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1013.7" y="974.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.13%)</title><rect x="1010.7" y="947.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.7" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.13%)</title><rect x="1010.7" y="931.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1013.7" y="942.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.13%)</title><rect x="1010.7" y="915.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.7" y="926.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.13%)</title><rect x="1010.7" y="899.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1013.7" y="910.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.13%)</title><rect x="1010.7" y="883.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.7" y="894.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.13%)</title><rect x="1010.7" y="867.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.7" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (118 samples, 15.07%)</title><rect x="1012.2" y="979.0" width="177.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1015.2" y="990.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (118 samples, 15.07%)</title><rect x="1012.2" y="963.0" width="177.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1015.2" y="974.0">JavaThread::thread_main..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (116 samples, 14.81%)</title><rect x="1012.2" y="947.0" width="174.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1015.2" y="958.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (116 samples, 14.81%)</title><rect x="1012.2" y="931.0" width="174.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.2" y="942.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (102 samples, 13.03%)</title><rect x="1012.2" y="915.0" width="153.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.2" y="926.0">C2Compiler::compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (102 samples, 13.03%)</title><rect x="1012.2" y="899.0" width="153.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1015.2" y="910.0">Compile::Compile(ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 7.02%)</title><rect x="1012.2" y="883.0" width="82.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.2" y="894.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.26%)</title><rect x="1012.2" y="867.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.2" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.13%)</title><rect x="1012.2" y="851.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.2" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.13%)</title><rect x="1013.7" y="851.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.7" y="862.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.13%)</title><rect x="1013.7" y="835.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.7" y="846.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.13%)</title><rect x="1015.2" y="867.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1018.2" y="878.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.13%)</title><rect x="1015.2" y="851.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.2" y="862.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.13%)</title><rect x="1015.2" y="835.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1018.2" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.64%)</title><rect x="1016.7" y="867.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.7" y="878.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.13%)</title><rect x="1016.7" y="851.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.7" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.51%)</title><rect x="1018.2" y="851.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.2" y="862.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.13%)</title><rect x="1019.7" y="835.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.7" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.13%)</title><rect x="1019.7" y="819.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.7" y="830.0"></text>
</g>
<g>
<title>RethrowNode::match_edge(unsigned int) const (1 samples, 0.13%)</title><rect x="1019.7" y="803.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.7" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.26%)</title><rect x="1021.2" y="835.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.2" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.13%)</title><rect x="1021.2" y="819.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.2" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.13%)</title><rect x="1021.2" y="803.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.2" y="814.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.13%)</title><rect x="1021.2" y="787.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.2" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.13%)</title><rect x="1021.2" y="771.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1024.2" y="782.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.13%)</title><rect x="1021.2" y="755.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.2" y="766.0"></text>
</g>
<g>
<title>State::_sub_Op_MinI(Node const*) (1 samples, 0.13%)</title><rect x="1021.2" y="739.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.2" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.13%)</title><rect x="1022.7" y="819.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1025.7" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.13%)</title><rect x="1022.7" y="803.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1025.7" y="814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.13%)</title><rect x="1022.7" y="787.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.7" y="798.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.13%)</title><rect x="1024.2" y="867.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.2" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.13%)</title><rect x="1024.2" y="851.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.2" y="862.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.13%)</title><rect x="1024.2" y="835.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1027.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.38%)</title><rect x="1025.7" y="867.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.38%)</title><rect x="1025.7" y="851.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.26%)</title><rect x="1025.7" y="835.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.7" y="846.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.13%)</title><rect x="1027.2" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.2" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.13%)</title><rect x="1028.7" y="835.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.7" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.13%)</title><rect x="1028.7" y="819.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1031.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 5.49%)</title><rect x="1030.3" y="867.0" width="64.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.3" y="878.0">PhaseCh..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1030.3" y="851.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.3" y="862.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.13%)</title><rect x="1031.8" y="851.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.8" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.77%)</title><rect x="1033.3" y="851.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.3" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1037.8" y="835.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.13%)</title><rect x="1039.3" y="835.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.3" y="846.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.13%)</title><rect x="1040.8" y="835.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1043.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.77%)</title><rect x="1042.3" y="851.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.3" y="862.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.13%)</title><rect x="1049.8" y="835.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 1.15%)</title><rect x="1051.4" y="851.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.38%)</title><rect x="1052.9" y="835.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.51%)</title><rect x="1057.4" y="835.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.4" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1057.4" y="819.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.4" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.13%)</title><rect x="1058.9" y="819.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.9" y="830.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.26%)</title><rect x="1060.4" y="819.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.4" y="830.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.13%)</title><rect x="1063.4" y="835.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.13%)</title><rect x="1064.9" y="851.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.13%)</title><rect x="1066.4" y="851.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.4" y="862.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.13%)</title><rect x="1066.4" y="835.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (4 samples, 0.51%)</title><rect x="1067.9" y="851.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.9" y="862.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.13%)</title><rect x="1072.5" y="835.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.13%)</title><rect x="1074.0" y="851.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.64%)</title><rect x="1075.5" y="851.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1078.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.26%)</title><rect x="1080.0" y="835.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1083.0" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.13%)</title><rect x="1083.0" y="851.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.0" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.13%)</title><rect x="1083.0" y="835.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.0" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.13%)</title><rect x="1084.5" y="851.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.5" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.13%)</title><rect x="1086.0" y="851.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.0" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.51%)</title><rect x="1087.5" y="851.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.5" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.38%)</title><rect x="1089.0" y="835.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.0" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.26%)</title><rect x="1090.5" y="819.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.5" y="830.0"></text>
</g>
<g>
<title>storeINode::oper_input_base() const (1 samples, 0.13%)</title><rect x="1093.6" y="851.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.6" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 4.09%)</title><rect x="1095.1" y="883.0" width="48.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.1" y="894.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.13%)</title><rect x="1095.1" y="867.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.1" y="878.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.13%)</title><rect x="1095.1" y="851.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.1" y="862.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.13%)</title><rect x="1096.6" y="867.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.6" y="878.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.13%)</title><rect x="1096.6" y="851.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.6" y="862.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.13%)</title><rect x="1096.6" y="835.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1096.6" y="819.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1096.6" y="803.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1096.6" y="787.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1096.6" y="771.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1096.6" y="755.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.13%)</title><rect x="1096.6" y="739.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.13%)</title><rect x="1096.6" y="723.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.6" y="734.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.13%)</title><rect x="1096.6" y="707.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.6" y="718.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.13%)</title><rect x="1096.6" y="691.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.6" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1096.6" y="675.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.6" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.13%)</title><rect x="1096.6" y="659.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (20 samples, 2.55%)</title><rect x="1098.1" y="867.0" width="30.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.1" y="878.0">Ph..</text>
</g>
<g>
<title>ConvI2LNode::Opcode() const (1 samples, 0.13%)</title><rect x="1099.6" y="851.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1102.6" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.13%)</title><rect x="1101.1" y="851.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.1" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.13%)</title><rect x="1101.1" y="835.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.1" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.13%)</title><rect x="1101.1" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.1" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.13%)</title><rect x="1101.1" y="803.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.1" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.13%)</title><rect x="1102.6" y="851.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.73] (1 samples, 0.13%)</title><rect x="1102.6" y="835.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.13%)</title><rect x="1102.6" y="819.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.6" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason, int) (1 samples, 0.13%)</title><rect x="1102.6" y="803.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.6" y="814.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.13%)</title><rect x="1104.1" y="851.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.26%)</title><rect x="1105.6" y="851.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.6" y="862.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.13%)</title><rect x="1107.1" y="835.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.26%)</title><rect x="1108.6" y="851.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.89%)</title><rect x="1111.6" y="851.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.64%)</title><rect x="1114.6" y="835.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.26%)</title><rect x="1117.7" y="819.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.13%)</title><rect x="1120.7" y="819.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.13%)</title><rect x="1120.7" y="803.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.13%)</title><rect x="1122.2" y="851.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.13%)</title><rect x="1122.2" y="835.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="846.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.13%)</title><rect x="1122.2" y="819.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.2" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.38%)</title><rect x="1123.7" y="851.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.38%)</title><rect x="1123.7" y="835.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.7" y="846.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.13%)</title><rect x="1123.7" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.7" y="830.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.13%)</title><rect x="1123.7" y="803.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.7" y="814.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1123.7" y="787.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.7" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.13%)</title><rect x="1123.7" y="771.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.7" y="782.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1125.2" y="819.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.2" y="830.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1125.2" y="803.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.2" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1126.7" y="819.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.7" y="830.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.13%)</title><rect x="1126.7" y="803.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.7" y="814.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.13%)</title><rect x="1126.7" y="787.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.7" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1126.7" y="771.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.7" y="782.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="1126.7" y="755.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1129.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.13%)</title><rect x="1128.2" y="867.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.2" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.13%)</title><rect x="1128.2" y="851.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.89%)</title><rect x="1129.7" y="867.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.13%)</title><rect x="1129.7" y="851.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.77%)</title><rect x="1131.2" y="851.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.2" y="862.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1134.2" y="835.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.2" y="846.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1134.2" y="819.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.2" y="830.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.13%)</title><rect x="1135.7" y="835.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.7" y="846.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.13%)</title><rect x="1135.7" y="819.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="830.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.13%)</title><rect x="1135.7" y="803.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.13%)</title><rect x="1135.7" y="787.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.7" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.26%)</title><rect x="1137.3" y="835.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.3" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.13%)</title><rect x="1138.8" y="819.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.8" y="830.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.13%)</title><rect x="1138.8" y="803.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.8" y="814.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.13%)</title><rect x="1138.8" y="787.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.8" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.26%)</title><rect x="1140.3" y="867.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.13%)</title><rect x="1140.3" y="851.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.3" y="862.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseGVN*) const (1 samples, 0.13%)</title><rect x="1140.3" y="835.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.3" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.13%)</title><rect x="1141.8" y="851.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::prefetch_allocation(Node*, Node*&amp;, Node*&amp;, Node*, Node*, Node*) (1 samples, 0.13%)</title><rect x="1141.8" y="835.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.8" y="846.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.13%)</title><rect x="1141.8" y="819.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.8" y="830.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.13%)</title><rect x="1143.3" y="883.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.3" y="894.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.13%)</title><rect x="1143.3" y="867.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.3" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.13%)</title><rect x="1143.3" y="851.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.3" y="862.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.13%)</title><rect x="1143.3" y="835.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 1.66%)</title><rect x="1144.8" y="883.0" width="19.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 1.66%)</title><rect x="1144.8" y="867.0" width="19.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.8" y="878.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.13%)</title><rect x="1144.8" y="851.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.8" y="862.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.13%)</title><rect x="1144.8" y="835.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.8" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.13%)</title><rect x="1144.8" y="819.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="830.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.13%)</title><rect x="1144.8" y="803.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.8" y="814.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.13%)</title><rect x="1144.8" y="787.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 1.53%)</title><rect x="1146.3" y="851.0" width="18.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 1.53%)</title><rect x="1146.3" y="835.0" width="18.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 1.53%)</title><rect x="1146.3" y="819.0" width="18.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="830.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.13%)</title><rect x="1146.3" y="803.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.3" y="814.0"></text>
</g>
<g>
<title>Parse::array_store_check() (1 samples, 0.13%)</title><rect x="1146.3" y="787.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.3" y="798.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.13%)</title><rect x="1146.3" y="771.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.13%)</title><rect x="1146.3" y="755.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.13%)</title><rect x="1146.3" y="739.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.3" y="750.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.13%)</title><rect x="1146.3" y="723.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 1.40%)</title><rect x="1147.8" y="803.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.8" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.26%)</title><rect x="1147.8" y="787.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.8" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.26%)</title><rect x="1147.8" y="771.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.8" y="782.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.13%)</title><rect x="1147.8" y="755.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.8" y="766.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.13%)</title><rect x="1147.8" y="739.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.8" y="750.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.13%)</title><rect x="1147.8" y="723.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.8" y="734.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.13%)</title><rect x="1147.8" y="707.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.8" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.13%)</title><rect x="1149.3" y="755.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.13%)</title><rect x="1149.3" y="739.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.13%)</title><rect x="1149.3" y="723.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.13%)</title><rect x="1149.3" y="707.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.13%)</title><rect x="1149.3" y="691.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.13%)</title><rect x="1149.3" y="675.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.13%)</title><rect x="1149.3" y="659.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.3" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.13%)</title><rect x="1149.3" y="643.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.3" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1149.3" y="627.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1149.3" y="611.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1149.3" y="595.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1149.3" y="579.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.3" y="590.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1149.3" y="563.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.3" y="574.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.13%)</title><rect x="1149.3" y="547.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.3" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.13%)</title><rect x="1149.3" y="531.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.3" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.13%)</title><rect x="1149.3" y="515.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="526.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.13%)</title><rect x="1149.3" y="499.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.89%)</title><rect x="1150.8" y="787.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.89%)</title><rect x="1150.8" y="771.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.89%)</title><rect x="1150.8" y="755.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.89%)</title><rect x="1150.8" y="739.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.13%)</title><rect x="1150.8" y="723.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.8" y="734.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.13%)</title><rect x="1150.8" y="707.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="718.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.13%)</title><rect x="1150.8" y="691.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="702.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.13%)</title><rect x="1150.8" y="675.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.77%)</title><rect x="1152.3" y="723.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.64%)</title><rect x="1152.3" y="707.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.51%)</title><rect x="1152.3" y="691.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.51%)</title><rect x="1152.3" y="675.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.51%)</title><rect x="1152.3" y="659.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.51%)</title><rect x="1152.3" y="643.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.51%)</title><rect x="1152.3" y="627.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.38%)</title><rect x="1152.3" y="611.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.38%)</title><rect x="1152.3" y="595.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.38%)</title><rect x="1152.3" y="579.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.3" y="590.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.13%)</title><rect x="1152.3" y="563.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.26%)</title><rect x="1153.8" y="563.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.26%)</title><rect x="1153.8" y="547.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.26%)</title><rect x="1153.8" y="531.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.26%)</title><rect x="1153.8" y="515.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.26%)</title><rect x="1153.8" y="499.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.26%)</title><rect x="1153.8" y="483.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.26%)</title><rect x="1153.8" y="467.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.26%)</title><rect x="1153.8" y="451.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.26%)</title><rect x="1153.8" y="435.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.26%)</title><rect x="1153.8" y="419.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.26%)</title><rect x="1153.8" y="403.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.26%)</title><rect x="1153.8" y="387.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.26%)</title><rect x="1153.8" y="371.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.26%)</title><rect x="1153.8" y="355.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.26%)</title><rect x="1153.8" y="339.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.8" y="350.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.13%)</title><rect x="1153.8" y="323.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="334.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.13%)</title><rect x="1153.8" y="307.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="318.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.13%)</title><rect x="1153.8" y="291.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1153.8" y="275.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.8" y="286.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.13%)</title><rect x="1153.8" y="259.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.8" y="270.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.13%)</title><rect x="1153.8" y="243.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.8" y="254.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.13%)</title><rect x="1153.8" y="227.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1155.3" y="323.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1155.3" y="307.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1155.3" y="291.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1155.3" y="275.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1155.3" y="259.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1155.3" y="243.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1155.3" y="227.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.3" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1155.3" y="211.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1155.3" y="195.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1155.3" y="179.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1155.3" y="163.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1155.3" y="147.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.13%)</title><rect x="1155.3" y="131.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="142.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.13%)</title><rect x="1155.3" y="115.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.3" y="126.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="1155.3" y="99.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1158.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_newarray(BasicType) (1 samples, 0.13%)</title><rect x="1156.8" y="611.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.13%)</title><rect x="1156.8" y="595.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>GraphKit::ConvI2L(Node*) (1 samples, 0.13%)</title><rect x="1156.8" y="579.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.8" y="590.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.13%)</title><rect x="1156.8" y="563.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.8" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="691.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="675.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1158.4" y="659.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1158.4" y="643.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1158.4" y="627.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1158.4" y="611.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1158.4" y="595.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.4" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="579.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="563.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1158.4" y="547.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1158.4" y="531.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1158.4" y="515.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1158.4" y="499.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1158.4" y="483.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="467.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1158.4" y="451.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1158.4" y="435.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1158.4" y="419.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1158.4" y="403.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1158.4" y="387.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="371.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1158.4" y="355.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1158.4" y="339.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1158.4" y="323.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1158.4" y="307.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1158.4" y="291.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1158.4" y="275.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1158.4" y="259.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1158.4" y="243.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1158.4" y="227.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1158.4" y="211.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.13%)</title><rect x="1158.4" y="195.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.13%)</title><rect x="1158.4" y="179.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.4" y="190.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.13%)</title><rect x="1158.4" y="163.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.4" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.13%)</title><rect x="1158.4" y="147.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.4" y="158.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.13%)</title><rect x="1158.4" y="131.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.4" y="142.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.13%)</title><rect x="1158.4" y="115.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.4" y="126.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.13%)</title><rect x="1158.4" y="99.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="110.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.13%)</title><rect x="1158.4" y="83.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="94.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.13%)</title><rect x="1158.4" y="67.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.4" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.13%)</title><rect x="1158.4" y="51.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.4" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.13%)</title><rect x="1158.4" y="35.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.13%)</title><rect x="1159.9" y="707.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.13%)</title><rect x="1159.9" y="691.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.13%)</title><rect x="1159.9" y="675.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="686.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.13%)</title><rect x="1159.9" y="659.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1159.9" y="643.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="654.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.13%)</title><rect x="1159.9" y="627.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.9" y="638.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.13%)</title><rect x="1159.9" y="611.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1162.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1159.9" y="595.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1162.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="1159.9" y="579.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1162.9" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.26%)</title><rect x="1161.4" y="787.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.26%)</title><rect x="1161.4" y="771.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.26%)</title><rect x="1161.4" y="755.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.26%)</title><rect x="1161.4" y="739.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.26%)</title><rect x="1161.4" y="723.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.26%)</title><rect x="1161.4" y="707.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.26%)</title><rect x="1161.4" y="691.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="702.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.13%)</title><rect x="1161.4" y="675.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="675.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1162.9" y="659.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1162.9" y="643.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1162.9" y="627.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1162.9" y="611.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1162.9" y="595.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="579.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1162.9" y="563.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1162.9" y="547.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1162.9" y="531.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1162.9" y="515.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1162.9" y="499.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="483.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="467.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1162.9" y="451.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1162.9" y="435.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1162.9" y="419.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1162.9" y="403.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1162.9" y="387.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="371.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="355.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1162.9" y="339.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1162.9" y="323.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1162.9" y="307.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1162.9" y="291.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1162.9" y="275.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="259.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1162.9" y="243.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1162.9" y="227.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1162.9" y="211.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1162.9" y="195.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1162.9" y="179.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1162.9" y="163.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1162.9" y="147.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="158.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.13%)</title><rect x="1162.9" y="131.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="142.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.13%)</title><rect x="1162.9" y="115.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.13%)</title><rect x="1162.9" y="99.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.13%)</title><rect x="1162.9" y="83.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.9" y="94.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.13%)</title><rect x="1162.9" y="67.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1165.9" y="78.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.13%)</title><rect x="1164.4" y="883.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.4" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.13%)</title><rect x="1164.4" y="867.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.4" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (13 samples, 1.66%)</title><rect x="1165.9" y="915.0" width="19.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.9" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (13 samples, 1.66%)</title><rect x="1165.9" y="899.0" width="19.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.9" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (13 samples, 1.66%)</title><rect x="1165.9" y="883.0" width="19.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.9" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (12 samples, 1.53%)</title><rect x="1165.9" y="867.0" width="18.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (2 samples, 0.26%)</title><rect x="1165.9" y="851.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.26%)</title><rect x="1165.9" y="835.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.26%)</title><rect x="1165.9" y="819.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.9" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.13%)</title><rect x="1165.9" y="803.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.9" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.13%)</title><rect x="1165.9" y="787.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.9" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.13%)</title><rect x="1165.9" y="771.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.9" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.13%)</title><rect x="1165.9" y="755.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="1165.9" y="739.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1168.9" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.13%)</title><rect x="1167.4" y="803.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1170.4" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.26%)</title><rect x="1168.9" y="851.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="862.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.26%)</title><rect x="1168.9" y="835.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.13%)</title><rect x="1168.9" y="819.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.13%)</title><rect x="1168.9" y="803.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.13%)</title><rect x="1168.9" y="787.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.13%)</title><rect x="1170.4" y="819.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.4" y="830.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.13%)</title><rect x="1170.4" y="803.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="814.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.13%)</title><rect x="1170.4" y="787.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.4" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (8 samples, 1.02%)</title><rect x="1171.9" y="851.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.9" y="862.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.38%)</title><rect x="1171.9" y="835.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="846.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (3 samples, 0.38%)</title><rect x="1171.9" y="819.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="830.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.13%)</title><rect x="1171.9" y="803.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.9" y="814.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.13%)</title><rect x="1171.9" y="787.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.9" y="798.0"></text>
</g>
<g>
<title>LIRGenerator::do_LoadField(LoadField*) (1 samples, 0.13%)</title><rect x="1173.4" y="803.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="814.0"></text>
</g>
<g>
<title>LIRGenerator::access_load_at(unsigned long, BasicType, LIRItem&amp;, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*, CodeEmitInfo*) (1 samples, 0.13%)</title><rect x="1173.4" y="787.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.4" y="798.0"></text>
</g>
<g>
<title>G1BarrierSetC1::load_at_resolved(LIRAccess&amp;, LIR_OprDesc*) (1 samples, 0.13%)</title><rect x="1173.4" y="771.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.4" y="782.0"></text>
</g>
<g>
<title>LIR_List::load(LIR_Address*, LIR_OprDesc*, CodeEmitInfo*, LIR_PatchCode) (1 samples, 0.13%)</title><rect x="1173.4" y="755.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="766.0"></text>
</g>
<g>
<title>LIR_OpBranch::LIR_OpBranch(LIR_Condition, BasicType, BlockBegin*) (1 samples, 0.13%)</title><rect x="1174.9" y="803.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (5 samples, 0.64%)</title><rect x="1176.4" y="835.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.26%)</title><rect x="1176.4" y="819.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (2 samples, 0.26%)</title><rect x="1176.4" y="803.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) [clone .constprop.233] (1 samples, 0.13%)</title><rect x="1176.4" y="787.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.13%)</title><rect x="1177.9" y="787.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.13%)</title><rect x="1177.9" y="771.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.13%)</title><rect x="1177.9" y="755.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.13%)</title><rect x="1179.5" y="819.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="830.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.13%)</title><rect x="1179.5" y="803.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="814.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.13%)</title><rect x="1179.5" y="787.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="798.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.13%)</title><rect x="1181.0" y="819.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="830.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.13%)</title><rect x="1182.5" y="819.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>MoveResolver::resolve_and_append_moves() (1 samples, 0.13%)</title><rect x="1182.5" y="803.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.13%)</title><rect x="1182.5" y="787.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.13%)</title><rect x="1184.0" y="867.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.13%)</title><rect x="1185.5" y="915.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.5" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1185.5" y="899.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1185.5" y="883.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="894.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1185.5" y="867.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="878.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.13%)</title><rect x="1185.5" y="851.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="862.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.26%)</title><rect x="1187.0" y="947.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="958.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.26%)</title><rect x="1187.0" y="931.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="942.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.26%)</title><rect x="1187.0" y="915.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="926.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.26%)</title><rect x="1187.0" y="899.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1190.0" y="910.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (2 samples, 0.26%)</title><rect x="1187.0" y="883.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.0" y="894.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.26%)</title><rect x="1187.0" y="867.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="878.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.26%)</title><rect x="1187.0" y="851.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.13%)</title><rect x="1187.0" y="835.0" width="1.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="1188.5" y="835.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1191.5" y="846.0"></text>
</g>
</g>
</svg>
