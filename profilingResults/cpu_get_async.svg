<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1317"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1317"> </text>
<g id="frames">
<g>
<title>all (475 samples, 100.00%)</title><rect x="10.0" y="1283.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1294.0">all</text>
</g>
<g>
<title>InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*) (1 samples, 0.21%)</title><rect x="10.0" y="1267.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.21%)</title><rect x="10.0" y="1251.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.21%)</title><rect x="12.5" y="1267.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.5" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.21%)</title><rect x="12.5" y="1251.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.5" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.21%)</title><rect x="12.5" y="1235.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.5" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.21%)</title><rect x="12.5" y="1219.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.5" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.21%)</title><rect x="12.5" y="1203.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.5" y="1214.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.21%)</title><rect x="15.0" y="1267.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.0" y="1278.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.21%)</title><rect x="15.0" y="1251.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.0" y="1262.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (1 samples, 0.21%)</title><rect x="15.0" y="1235.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.0" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (1 samples, 0.21%)</title><rect x="15.0" y="1219.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.0" y="1230.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.63%)</title><rect x="17.5" y="1267.0" width="7.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="20.5" y="1278.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.42%)</title><rect x="17.5" y="1251.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.5" y="1262.0"></text>
</g>
<g>
<title>caller_is_deopted() (2 samples, 0.42%)</title><rect x="17.5" y="1235.0" width="4.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="20.5" y="1246.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.21%)</title><rect x="17.5" y="1219.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.5" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.21%)</title><rect x="19.9" y="1219.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.9" y="1230.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.21%)</title><rect x="19.9" y="1203.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="22.9" y="1214.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.21%)</title><rect x="22.4" y="1251.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="25.4" y="1262.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.21%)</title><rect x="22.4" y="1235.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="25.4" y="1246.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.21%)</title><rect x="22.4" y="1219.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="25.4" y="1230.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="24.9" y="1267.0" width="2.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="27.9" y="1278.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.21%)</title><rect x="24.9" y="1251.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="27.9" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.21%)</title><rect x="24.9" y="1235.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="27.9" y="1246.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.21%)</title><rect x="27.4" y="1267.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="30.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.run (256 samples, 53.89%)</title><rect x="29.9" y="1267.0" width="635.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.9" y="1278.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (256 samples, 53.89%)</title><rect x="29.9" y="1251.0" width="635.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.9" y="1262.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (256 samples, 53.89%)</title><rect x="29.9" y="1235.0" width="635.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.9" y="1246.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.63%)</title><rect x="92.0" y="1219.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.42%)</title><rect x="99.4" y="1219.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.21%)</title><rect x="101.9" y="1203.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.21%)</title><rect x="101.9" y="1187.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.21%)</title><rect x="101.9" y="1171.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="104.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.21%)</title><rect x="101.9" y="1155.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.21%)</title><rect x="101.9" y="1139.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.21%)</title><rect x="101.9" y="1123.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="104.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (51 samples, 10.74%)</title><rect x="104.4" y="1219.0" width="126.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.4" y="1230.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (51 samples, 10.74%)</title><rect x="104.4" y="1203.0" width="126.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.4" y="1214.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.21%)</title><rect x="111.9" y="1187.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (1 samples, 0.21%)</title><rect x="114.3" y="1187.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.3" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddInt (1 samples, 0.21%)</title><rect x="114.3" y="1171.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (41 samples, 8.63%)</title><rect x="116.8" y="1187.0" width="101.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.8" y="1198.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.21%)</title><rect x="124.3" y="1171.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="127.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.21%)</title><rect x="124.3" y="1155.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.21%)</title><rect x="124.3" y="1139.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.21%)</title><rect x="126.8" y="1171.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (36 samples, 7.58%)</title><rect x="129.2" y="1171.0" width="89.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.2" y="1182.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (36 samples, 7.58%)</title><rect x="129.2" y="1155.0" width="89.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.2" y="1166.0">jdk/intern..</text>
</g>
<g>
<title>Unsafe_Park (13 samples, 2.74%)</title><rect x="129.2" y="1139.0" width="32.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="132.2" y="1150.0">Un..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.42%)</title><rect x="131.7" y="1123.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="134.7" y="1134.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.21%)</title><rect x="136.7" y="1123.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="139.7" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 1.47%)</title><rect x="139.2" y="1123.0" width="17.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="142.2" y="1134.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="151.6" y="1107.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="154.6" y="1118.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="151.6" y="1091.0" width="5.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="154.6" y="1102.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.21%)</title><rect x="156.6" y="1123.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="159.6" y="1134.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.21%)</title><rect x="159.1" y="1123.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="162.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 4.63%)</title><rect x="161.5" y="1139.0" width="54.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="164.5" y="1150.0">[unkn..</text>
</g>
<g>
<title>__pthread_cond_wait (22 samples, 4.63%)</title><rect x="161.5" y="1123.0" width="54.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="164.5" y="1134.0">__pth..</text>
</g>
<g>
<title>[unknown] (18 samples, 3.79%)</title><rect x="171.5" y="1107.0" width="44.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="174.5" y="1118.0">[unk..</text>
</g>
<g>
<title>[unknown] (18 samples, 3.79%)</title><rect x="171.5" y="1091.0" width="44.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="174.5" y="1102.0">[unk..</text>
</g>
<g>
<title>[unknown] (15 samples, 3.16%)</title><rect x="178.9" y="1075.0" width="37.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="181.9" y="1086.0">[un..</text>
</g>
<g>
<title>[unknown] (14 samples, 2.95%)</title><rect x="181.4" y="1059.0" width="34.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="184.4" y="1070.0">[u..</text>
</g>
<g>
<title>[unknown] (13 samples, 2.74%)</title><rect x="183.9" y="1043.0" width="32.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="186.9" y="1054.0">[u..</text>
</g>
<g>
<title>[unknown] (13 samples, 2.74%)</title><rect x="183.9" y="1027.0" width="32.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="186.9" y="1038.0">[u..</text>
</g>
<g>
<title>[unknown] (12 samples, 2.53%)</title><rect x="186.4" y="1011.0" width="29.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="189.4" y="1022.0">[u..</text>
</g>
<g>
<title>[unknown] (10 samples, 2.11%)</title><rect x="191.3" y="995.0" width="24.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="194.3" y="1006.0">[..</text>
</g>
<g>
<title>[unknown] (9 samples, 1.89%)</title><rect x="193.8" y="979.0" width="22.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="196.8" y="990.0">[..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.21%)</title><rect x="216.2" y="1139.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="219.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.42%)</title><rect x="218.7" y="1187.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.42%)</title><rect x="218.7" y="1171.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.42%)</title><rect x="218.7" y="1155.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.63%)</title><rect x="223.6" y="1187.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.63%)</title><rect x="223.6" y="1171.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.63%)</title><rect x="223.6" y="1155.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.63%)</title><rect x="223.6" y="1139.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.6" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.63%)</title><rect x="223.6" y="1123.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.6" y="1134.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.21%)</title><rect x="223.6" y="1107.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="226.6" y="1118.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.42%)</title><rect x="226.1" y="1107.0" width="5.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="229.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="1091.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="231.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="1075.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="231.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="1059.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="231.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="1043.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="231.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="1027.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="231.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="1011.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="231.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="995.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="231.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="228.6" y="979.0" width="2.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="231.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.21%)</title><rect x="231.1" y="1219.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.1" y="1230.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService$$Lambda$63/505802050.run (174 samples, 36.63%)</title><rect x="233.6" y="1219.0" width="432.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.6" y="1230.0">ru/mail/polis/service/AsyncHttpService$$Lambda$63/505802050..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.lambda$executeAsync$3 (174 samples, 36.63%)</title><rect x="233.6" y="1203.0" width="432.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.6" y="1214.0">ru/mail/polis/service/AsyncHttpService.lambda$executeAsync$3</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (99 samples, 20.84%)</title><rect x="233.6" y="1187.0" width="245.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.6" y="1198.0">one/nio/http/HttpSession.sendResp..</text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.21%)</title><rect x="236.1" y="1171.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.1" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (96 samples, 20.21%)</title><rect x="238.5" y="1171.0" width="238.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.5" y="1182.0">one/nio/http/HttpSession.writeRe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 1.26%)</title><rect x="238.5" y="1155.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.5" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.21%)</title><rect x="243.5" y="1139.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="243.5" y="1123.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="246.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="243.5" y="1107.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="246.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="243.5" y="1091.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="246.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="243.5" y="1075.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="246.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="243.5" y="1059.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="246.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="243.5" y="1043.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="246.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.63%)</title><rect x="246.0" y="1139.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.0" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.21%)</title><rect x="246.0" y="1123.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.42%)</title><rect x="248.5" y="1123.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.42%)</title><rect x="248.5" y="1107.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (90 samples, 18.95%)</title><rect x="253.5" y="1155.0" width="223.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.5" y="1166.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (90 samples, 18.95%)</title><rect x="253.5" y="1139.0" width="223.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.5" y="1150.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (90 samples, 18.95%)</title><rect x="253.5" y="1123.0" width="223.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.5" y="1134.0">one/nio/net/Session$ArrayQueu..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (90 samples, 18.95%)</title><rect x="253.5" y="1107.0" width="223.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.5" y="1118.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.21%)</title><rect x="255.9" y="1091.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="258.9" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="258.4" y="1091.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="261.4" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="258.4" y="1075.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="261.4" y="1086.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (1 samples, 0.21%)</title><rect x="258.4" y="1059.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="261.4" y="1070.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.21%)</title><rect x="258.4" y="1043.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="261.4" y="1054.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.21%)</title><rect x="258.4" y="1027.0" width="2.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="261.4" y="1038.0"></text>
</g>
<g>
<title>__send (87 samples, 18.32%)</title><rect x="260.9" y="1091.0" width="216.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="263.9" y="1102.0">__send</text>
</g>
<g>
<title>[unknown] (84 samples, 17.68%)</title><rect x="268.4" y="1075.0" width="208.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="271.4" y="1086.0">[unknown]</text>
</g>
<g>
<title>[unknown] (84 samples, 17.68%)</title><rect x="268.4" y="1059.0" width="208.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="271.4" y="1070.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 16.84%)</title><rect x="278.3" y="1043.0" width="198.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="281.3" y="1054.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 16.84%)</title><rect x="278.3" y="1027.0" width="198.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="281.3" y="1038.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 16.84%)</title><rect x="278.3" y="1011.0" width="198.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="281.3" y="1022.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 16.84%)</title><rect x="278.3" y="995.0" width="198.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="281.3" y="1006.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 16.84%)</title><rect x="278.3" y="979.0" width="198.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="281.3" y="990.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 16.84%)</title><rect x="278.3" y="963.0" width="198.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="281.3" y="974.0">[unknown]</text>
</g>
<g>
<title>[unknown] (77 samples, 16.21%)</title><rect x="285.7" y="947.0" width="191.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="288.7" y="958.0">[unknown]</text>
</g>
<g>
<title>[unknown] (73 samples, 15.37%)</title><rect x="295.7" y="931.0" width="181.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="298.7" y="942.0">[unknown]</text>
</g>
<g>
<title>[unknown] (72 samples, 15.16%)</title><rect x="298.2" y="915.0" width="178.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="301.2" y="926.0">[unknown]</text>
</g>
<g>
<title>[unknown] (69 samples, 14.53%)</title><rect x="305.6" y="899.0" width="171.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="308.6" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (65 samples, 13.68%)</title><rect x="315.6" y="883.0" width="161.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="318.6" y="894.0">[unknown]</text>
</g>
<g>
<title>[unknown] (62 samples, 13.05%)</title><rect x="323.0" y="867.0" width="154.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="326.0" y="878.0">[unknown]</text>
</g>
<g>
<title>[unknown] (59 samples, 12.42%)</title><rect x="330.5" y="851.0" width="146.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="333.5" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (58 samples, 12.21%)</title><rect x="332.9" y="835.0" width="144.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="335.9" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (56 samples, 11.79%)</title><rect x="337.9" y="819.0" width="139.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="340.9" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (55 samples, 11.58%)</title><rect x="340.4" y="803.0" width="136.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="343.4" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (53 samples, 11.16%)</title><rect x="345.4" y="787.0" width="131.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="348.4" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (53 samples, 11.16%)</title><rect x="345.4" y="771.0" width="131.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="348.4" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (53 samples, 11.16%)</title><rect x="345.4" y="755.0" width="131.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="348.4" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (52 samples, 10.95%)</title><rect x="347.9" y="739.0" width="129.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="350.9" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (51 samples, 10.74%)</title><rect x="350.3" y="723.0" width="126.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="353.3" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (50 samples, 10.53%)</title><rect x="352.8" y="707.0" width="124.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="355.8" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (50 samples, 10.53%)</title><rect x="352.8" y="691.0" width="124.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="355.8" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (50 samples, 10.53%)</title><rect x="352.8" y="675.0" width="124.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="355.8" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (50 samples, 10.53%)</title><rect x="352.8" y="659.0" width="124.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="355.8" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (48 samples, 10.11%)</title><rect x="357.8" y="643.0" width="119.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="360.8" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (48 samples, 10.11%)</title><rect x="357.8" y="627.0" width="119.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="360.8" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (48 samples, 10.11%)</title><rect x="357.8" y="611.0" width="119.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="360.8" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (48 samples, 10.11%)</title><rect x="357.8" y="595.0" width="119.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="360.8" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (48 samples, 10.11%)</title><rect x="357.8" y="579.0" width="119.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="360.8" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (45 samples, 9.47%)</title><rect x="365.2" y="563.0" width="111.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="368.2" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (40 samples, 8.42%)</title><rect x="377.7" y="547.0" width="99.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="380.7" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (37 samples, 7.79%)</title><rect x="385.1" y="531.0" width="91.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="388.1" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (27 samples, 5.68%)</title><rect x="410.0" y="515.0" width="67.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="413.0" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (24 samples, 5.05%)</title><rect x="417.4" y="499.0" width="59.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="420.4" y="510.0">[unkno..</text>
</g>
<g>
<title>[unknown] (23 samples, 4.84%)</title><rect x="419.9" y="483.0" width="57.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="422.9" y="494.0">[unkno..</text>
</g>
<g>
<title>[unknown] (23 samples, 4.84%)</title><rect x="419.9" y="467.0" width="57.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="422.9" y="478.0">[unkno..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.21%)</title><rect x="477.0" y="1171.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.21%)</title><rect x="477.0" y="1155.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.0" y="1166.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.21%)</title><rect x="479.5" y="1187.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="482.5" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1171.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="482.5" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1155.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="482.5" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1139.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="482.5" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1123.0" width="2.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="482.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1107.0" width="2.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="482.5" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1091.0" width="2.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="482.5" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1075.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="482.5" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="479.5" y="1059.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="482.5" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService$$Lambda$61/868275605.act (74 samples, 15.58%)</title><rect x="482.0" y="1187.0" width="183.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.0" y="1198.0">ru/mail/polis/service/As..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.lambda$entity$0 (74 samples, 15.58%)</title><rect x="482.0" y="1171.0" width="183.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.0" y="1182.0">ru/mail/polis/service/As..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.getMethodWrapper (74 samples, 15.58%)</title><rect x="482.0" y="1155.0" width="183.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.0" y="1166.0">ru/mail/polis/service/As..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.copyAndExtractFromByteBuffer (71 samples, 14.95%)</title><rect x="482.0" y="1139.0" width="176.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="1150.0">ru/mail/polis/service/A..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.get (71 samples, 14.95%)</title><rect x="482.0" y="1123.0" width="176.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.0" y="1134.0">ru/mail/polis/dao/DAORo..</text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (33 samples, 6.95%)</title><rect x="484.5" y="1107.0" width="82.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.5" y="1118.0">java/util..</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (33 samples, 6.95%)</title><rect x="484.5" y="1091.0" width="82.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="487.5" y="1102.0">java/lang..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (33 samples, 6.95%)</title><rect x="484.5" y="1075.0" width="82.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="487.5" y="1086.0">java/lang..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (33 samples, 6.95%)</title><rect x="484.5" y="1059.0" width="82.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.5" y="1070.0">java/lang..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (31 samples, 6.53%)</title><rect x="489.5" y="1043.0" width="77.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.5" y="1054.0">java/lang..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (31 samples, 6.53%)</title><rect x="489.5" y="1027.0" width="77.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.5" y="1038.0">java/lang..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (31 samples, 6.53%)</title><rect x="489.5" y="1011.0" width="77.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="492.5" y="1022.0">Java_java..</text>
</g>
<g>
<title>JVM_FillInStackTrace (31 samples, 6.53%)</title><rect x="489.5" y="995.0" width="77.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="492.5" y="1006.0">JVM_FillI..</text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (1 samples, 0.21%)</title><rect x="491.9" y="979.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="494.9" y="990.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (1 samples, 0.21%)</title><rect x="494.4" y="979.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="497.4" y="990.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (27 samples, 5.68%)</title><rect x="496.9" y="979.0" width="67.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="499.9" y="990.0">java_la..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.21%)</title><rect x="496.9" y="963.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="499.9" y="974.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.21%)</title><rect x="499.4" y="963.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="502.4" y="974.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (1 samples, 0.21%)</title><rect x="501.9" y="963.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="504.9" y="974.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.21%)</title><rect x="504.4" y="963.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="507.4" y="974.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (23 samples, 4.84%)</title><rect x="506.8" y="963.0" width="57.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="509.8" y="974.0">java_l..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.42%)</title><rect x="514.3" y="947.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="517.3" y="958.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (8 samples, 1.68%)</title><rect x="519.3" y="947.0" width="19.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="522.3" y="958.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (7 samples, 1.47%)</title><rect x="519.3" y="931.0" width="17.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="522.3" y="942.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.63%)</title><rect x="519.3" y="915.0" width="7.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="522.3" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.21%)</title><rect x="521.7" y="899.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="524.7" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.21%)</title><rect x="521.7" y="883.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="524.7" y="894.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.21%)</title><rect x="521.7" y="867.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="524.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="851.0" width="2.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="524.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="835.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="524.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="819.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="524.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="803.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="524.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="787.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="524.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="771.0" width="2.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="524.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="755.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="524.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="521.7" y="739.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="524.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.21%)</title><rect x="524.2" y="899.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="527.2" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.84%)</title><rect x="526.7" y="915.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="529.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.84%)</title><rect x="526.7" y="899.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="529.7" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.84%)</title><rect x="526.7" y="883.0" width="10.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="529.7" y="894.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.21%)</title><rect x="529.2" y="867.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="532.2" y="878.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.42%)</title><rect x="531.7" y="867.0" width="5.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="534.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="531.7" y="851.0" width="5.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="534.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="531.7" y="835.0" width="5.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="534.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="531.7" y="819.0" width="5.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="534.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="531.7" y="803.0" width="5.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="534.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="531.7" y="787.0" width="5.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="534.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="534.2" y="771.0" width="2.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="537.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="534.2" y="755.0" width="2.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="537.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="534.2" y="739.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="537.2" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.21%)</title><rect x="536.7" y="931.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="539.7" y="942.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.21%)</title><rect x="539.1" y="947.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="542.1" y="958.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.42%)</title><rect x="541.6" y="947.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="544.6" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.21%)</title><rect x="544.1" y="931.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="547.1" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.21%)</title><rect x="544.1" y="915.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="547.1" y="926.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.21%)</title><rect x="546.6" y="947.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="549.6" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 1.26%)</title><rect x="549.1" y="947.0" width="14.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="552.1" y="958.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (5 samples, 1.05%)</title><rect x="551.6" y="931.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="554.6" y="942.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.42%)</title><rect x="551.6" y="915.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="554.6" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.63%)</title><rect x="556.5" y="915.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="559.5" y="926.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.42%)</title><rect x="559.0" y="899.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="562.0" y="910.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.21%)</title><rect x="564.0" y="979.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="567.0" y="990.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (32 samples, 6.74%)</title><rect x="566.5" y="1107.0" width="79.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.5" y="1118.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (32 samples, 6.74%)</title><rect x="566.5" y="1091.0" width="79.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.5" y="1102.0">org/rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (26 samples, 5.47%)</title><rect x="566.5" y="1075.0" width="64.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="569.5" y="1086.0">Java_or..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.21%)</title><rect x="566.5" y="1059.0" width="2.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="569.5" y="1070.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.21%)</title><rect x="568.9" y="1059.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="571.9" y="1070.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.21%)</title><rect x="571.4" y="1059.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="574.4" y="1070.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.21%)</title><rect x="573.9" y="1059.0" width="2.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="576.9" y="1070.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.21%)</title><rect x="576.4" y="1059.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.4" y="1070.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (21 samples, 4.42%)</title><rect x="578.9" y="1059.0" width="52.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.9" y="1070.0">rocks..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.21%)</title><rect x="578.9" y="1043.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="581.9" y="1054.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.42%)</title><rect x="581.4" y="1043.0" width="4.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="584.4" y="1054.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.21%)</title><rect x="583.9" y="1027.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="586.9" y="1038.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.21%)</title><rect x="586.3" y="1043.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="589.3" y="1054.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (16 samples, 3.37%)</title><rect x="588.8" y="1043.0" width="39.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.8" y="1054.0">roc..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (16 samples, 3.37%)</title><rect x="588.8" y="1027.0" width="39.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="591.8" y="1038.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (16 samples, 3.37%)</title><rect x="588.8" y="1011.0" width="39.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="591.8" y="1022.0">roc..</text>
</g>
<g>
<title>_init (1 samples, 0.21%)</title><rect x="588.8" y="995.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="591.8" y="1006.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.21%)</title><rect x="591.3" y="995.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.3" y="1006.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (11 samples, 2.32%)</title><rect x="593.8" y="995.0" width="27.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="596.8" y="1006.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni4550591804908102967.so (1 samples, 0.21%)</title><rect x="598.8" y="979.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="601.8" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.21%)</title><rect x="601.2" y="979.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="604.2" y="990.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.21%)</title><rect x="603.7" y="979.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.7" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (1 samples, 0.21%)</title><rect x="606.2" y="979.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.2" y="990.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.21%)</title><rect x="606.2" y="963.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.2" y="974.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long) (1 samples, 0.21%)</title><rect x="608.7" y="979.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="611.7" y="990.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.21%)</title><rect x="611.2" y="979.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="614.2" y="990.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.21%)</title><rect x="613.7" y="979.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="616.7" y="990.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.21%)</title><rect x="616.1" y="979.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.1" y="990.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.21%)</title><rect x="618.6" y="979.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="621.6" y="990.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.21%)</title><rect x="618.6" y="963.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="621.6" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (1 samples, 0.21%)</title><rect x="621.1" y="995.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="624.1" y="1006.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.42%)</title><rect x="623.6" y="995.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="626.6" y="1006.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.21%)</title><rect x="628.6" y="1043.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="631.6" y="1054.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.21%)</title><rect x="631.1" y="1075.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="634.1" y="1086.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.21%)</title><rect x="633.5" y="1075.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="636.5" y="1086.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (3 samples, 0.63%)</title><rect x="636.0" y="1075.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="639.0" y="1086.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.21%)</title><rect x="643.5" y="1075.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="646.5" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.decompressKey (5 samples, 1.05%)</title><rect x="646.0" y="1107.0" width="12.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.0" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.21%)</title><rect x="646.0" y="1091.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="649.0" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.21%)</title><rect x="648.4" y="1091.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="651.4" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.copyAndExtractFromByteBuffer (3 samples, 0.63%)</title><rect x="650.9" y="1091.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.9" y="1102.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.42%)</title><rect x="650.9" y="1075.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.42%)</title><rect x="650.9" y="1059.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (1 samples, 0.21%)</title><rect x="650.9" y="1043.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="653.9" y="1054.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.21%)</title><rect x="650.9" y="1027.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="653.9" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.21%)</title><rect x="653.4" y="1043.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.4" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.21%)</title><rect x="655.9" y="1075.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.9" y="1086.0"></text>
</g>
<g>
<title>java/nio/Buffer.markValue (1 samples, 0.21%)</title><rect x="655.9" y="1059.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.9" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.responseWrapper (3 samples, 0.63%)</title><rect x="658.4" y="1139.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.4" y="1150.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.42%)</title><rect x="660.9" y="1123.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.21%)</title><rect x="663.3" y="1107.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="1118.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (135 samples, 28.42%)</title><rect x="665.8" y="1267.0" width="335.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.8" y="1278.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.63%)</title><rect x="725.5" y="1251.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.5" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="732.9" y="1251.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="735.9" y="1262.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="732.9" y="1235.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="735.9" y="1246.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="732.9" y="1219.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="735.9" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.21%)</title><rect x="735.4" y="1251.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.4" y="1262.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.21%)</title><rect x="737.9" y="1251.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.9" y="1262.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (37 samples, 7.79%)</title><rect x="740.4" y="1251.0" width="91.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.4" y="1262.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (6 samples, 1.26%)</title><rect x="742.8" y="1235.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.8" y="1246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.21%)</title><rect x="745.3" y="1219.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.3" y="1230.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.21%)</title><rect x="745.3" y="1203.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="748.3" y="1214.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.21%)</title><rect x="745.3" y="1187.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="748.3" y="1198.0"></text>
</g>
<g>
<title>CompiledIC::compute_monomorphic_entry(methodHandle const&amp;, Klass*, bool, bool, bool, CompiledICInfo&amp;, Thread*) (1 samples, 0.21%)</title><rect x="745.3" y="1171.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="748.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.21%)</title><rect x="747.8" y="1219.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="750.8" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.63%)</title><rect x="750.3" y="1219.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.3" y="1230.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getInt (1 samples, 0.21%)</title><rect x="755.3" y="1203.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.3" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (30 samples, 6.32%)</title><rect x="757.7" y="1235.0" width="74.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.7" y="1246.0">one/nio/..</text>
</g>
<g>
<title>[unknown] (25 samples, 5.26%)</title><rect x="762.7" y="1219.0" width="62.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="765.7" y="1230.0">[unkno..</text>
</g>
<g>
<title>epoll_wait (25 samples, 5.26%)</title><rect x="762.7" y="1203.0" width="62.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="765.7" y="1214.0">epoll_..</text>
</g>
<g>
<title>[unknown] (21 samples, 4.42%)</title><rect x="772.7" y="1187.0" width="52.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="775.7" y="1198.0">[unkn..</text>
</g>
<g>
<title>[unknown] (21 samples, 4.42%)</title><rect x="772.7" y="1171.0" width="52.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="775.7" y="1182.0">[unkn..</text>
</g>
<g>
<title>[unknown] (20 samples, 4.21%)</title><rect x="775.1" y="1155.0" width="49.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="778.1" y="1166.0">[unkn..</text>
</g>
<g>
<title>[unknown] (20 samples, 4.21%)</title><rect x="775.1" y="1139.0" width="49.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="778.1" y="1150.0">[unkn..</text>
</g>
<g>
<title>[unknown] (19 samples, 4.00%)</title><rect x="777.6" y="1123.0" width="47.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="780.6" y="1134.0">[unk..</text>
</g>
<g>
<title>[unknown] (17 samples, 3.58%)</title><rect x="782.6" y="1107.0" width="42.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="785.6" y="1118.0">[unk..</text>
</g>
<g>
<title>[unknown] (13 samples, 2.74%)</title><rect x="792.5" y="1091.0" width="32.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="795.5" y="1102.0">[u..</text>
</g>
<g>
<title>[unknown] (10 samples, 2.11%)</title><rect x="800.0" y="1075.0" width="24.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="803.0" y="1086.0">[..</text>
</g>
<g>
<title>[unknown] (6 samples, 1.26%)</title><rect x="809.9" y="1059.0" width="14.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="812.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 1.26%)</title><rect x="809.9" y="1043.0" width="14.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="812.9" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="1027.0" width="2.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="825.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="1011.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="825.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="995.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="825.3" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="979.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="825.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="963.0" width="2.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="825.3" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="947.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="825.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="822.3" y="931.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="825.3" y="942.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.21%)</title><rect x="824.8" y="1219.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="827.8" y="1230.0"></text>
</g>
<g>
<title>epoll_wait (2 samples, 0.42%)</title><rect x="827.3" y="1219.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="830.3" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (68 samples, 14.32%)</title><rect x="832.3" y="1251.0" width="168.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="835.3" y="1262.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (64 samples, 13.47%)</title><rect x="842.2" y="1235.0" width="159.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.2" y="1246.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (42 samples, 8.84%)</title><rect x="842.2" y="1219.0" width="104.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.2" y="1230.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (36 samples, 7.58%)</title><rect x="844.7" y="1203.0" width="89.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="847.7" y="1214.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (36 samples, 7.58%)</title><rect x="844.7" y="1187.0" width="89.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="847.7" y="1198.0">one/nio/ht..</text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.handleDefault (36 samples, 7.58%)</title><rect x="844.7" y="1171.0" width="89.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="847.7" y="1182.0">ru/mail/po..</text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.42%)</title><rect x="844.7" y="1155.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="847.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.21%)</title><rect x="847.2" y="1139.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="850.2" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.21%)</title><rect x="847.2" y="1123.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="850.2" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.entity (34 samples, 7.16%)</title><rect x="849.7" y="1155.0" width="84.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.7" y="1166.0">ru/mail/po..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.63%)</title><rect x="849.7" y="1139.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.21%)</title><rect x="852.1" y="1123.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.21%)</title><rect x="852.1" y="1107.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.1" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.21%)</title><rect x="854.6" y="1123.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="854.6" y="1107.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="854.6" y="1091.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="857.6" y="1102.0"></text>
</g>
<g>
<title>ru/mail/polis/service/AsyncHttpService.executeAsync (31 samples, 6.53%)</title><rect x="857.1" y="1139.0" width="77.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="860.1" y="1150.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (31 samples, 6.53%)</title><rect x="857.1" y="1123.0" width="77.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.1" y="1134.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (31 samples, 6.53%)</title><rect x="857.1" y="1107.0" width="77.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="860.1" y="1118.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (30 samples, 6.32%)</title><rect x="857.1" y="1091.0" width="74.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="860.1" y="1102.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 6.32%)</title><rect x="857.1" y="1075.0" width="74.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.1" y="1086.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 6.32%)</title><rect x="857.1" y="1059.0" width="74.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="860.1" y="1070.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 6.32%)</title><rect x="857.1" y="1043.0" width="74.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="860.1" y="1054.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.42%)</title><rect x="857.1" y="1027.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.21%)</title><rect x="859.6" y="1011.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="862.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 5.89%)</title><rect x="862.1" y="1027.0" width="69.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="865.1" y="1038.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (28 samples, 5.89%)</title><rect x="862.1" y="1011.0" width="69.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="865.1" y="1022.0">jdk/int..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (1 samples, 0.21%)</title><rect x="862.1" y="995.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.1" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 1.26%)</title><rect x="864.6" y="995.0" width="14.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="867.6" y="1006.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.21%)</title><rect x="864.6" y="979.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.6" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.42%)</title><rect x="867.1" y="979.0" width="4.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="870.1" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.21%)</title><rect x="872.0" y="979.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.0" y="990.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.21%)</title><rect x="874.5" y="979.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="877.5" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.21%)</title><rect x="877.0" y="979.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="880.0" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.21%)</title><rect x="879.5" y="995.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="882.5" y="1006.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.21%)</title><rect x="882.0" y="995.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="885.0" y="1006.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (19 samples, 4.00%)</title><rect x="884.4" y="995.0" width="47.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="887.4" y="1006.0">pthr..</text>
</g>
<g>
<title>[unknown] (17 samples, 3.58%)</title><rect x="889.4" y="979.0" width="42.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="892.4" y="990.0">[unk..</text>
</g>
<g>
<title>[unknown] (17 samples, 3.58%)</title><rect x="889.4" y="963.0" width="42.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="892.4" y="974.0">[unk..</text>
</g>
<g>
<title>[unknown] (15 samples, 3.16%)</title><rect x="894.4" y="947.0" width="37.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="897.4" y="958.0">[un..</text>
</g>
<g>
<title>[unknown] (15 samples, 3.16%)</title><rect x="894.4" y="931.0" width="37.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="897.4" y="942.0">[un..</text>
</g>
<g>
<title>[unknown] (15 samples, 3.16%)</title><rect x="894.4" y="915.0" width="37.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="897.4" y="926.0">[un..</text>
</g>
<g>
<title>[unknown] (14 samples, 2.95%)</title><rect x="896.9" y="899.0" width="34.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="899.9" y="910.0">[u..</text>
</g>
<g>
<title>[unknown] (12 samples, 2.53%)</title><rect x="901.8" y="883.0" width="29.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="904.8" y="894.0">[u..</text>
</g>
<g>
<title>[unknown] (12 samples, 2.53%)</title><rect x="901.8" y="867.0" width="29.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="904.8" y="878.0">[u..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.21%)</title><rect x="931.6" y="1091.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="934.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.21%)</title><rect x="931.6" y="1075.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="934.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.21%)</title><rect x="931.6" y="1059.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.21%)</title><rect x="931.6" y="1043.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="934.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.21%)</title><rect x="931.6" y="1027.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="934.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.21%)</title><rect x="931.6" y="1011.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="934.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.21%)</title><rect x="931.6" y="995.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="934.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.21%)</title><rect x="931.6" y="979.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="934.6" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.42%)</title><rect x="934.1" y="1203.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="937.1" y="1214.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.21%)</title><rect x="934.1" y="1187.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="937.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="934.1" y="1171.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="937.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.21%)</title><rect x="934.1" y="1155.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="937.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.21%)</title><rect x="934.1" y="1139.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="937.1" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="934.1" y="1123.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="937.1" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="934.1" y="1107.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="937.1" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="934.1" y="1091.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="937.1" y="1102.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.21%)</title><rect x="936.6" y="1187.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="939.6" y="1198.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.21%)</title><rect x="936.6" y="1171.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="939.6" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.21%)</title><rect x="939.1" y="1203.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="942.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.21%)</title><rect x="939.1" y="1187.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="942.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.21%)</title><rect x="939.1" y="1171.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="942.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.21%)</title><rect x="939.1" y="1155.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.1" y="1166.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.21%)</title><rect x="939.1" y="1139.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="942.1" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.42%)</title><rect x="941.6" y="1203.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="944.6" y="1214.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.42%)</title><rect x="941.6" y="1187.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.42%)</title><rect x="941.6" y="1171.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.42%)</title><rect x="941.6" y="1155.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (22 samples, 4.63%)</title><rect x="946.5" y="1219.0" width="54.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="949.5" y="1230.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (22 samples, 4.63%)</title><rect x="946.5" y="1203.0" width="54.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="949.5" y="1214.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.42%)</title><rect x="949.0" y="1187.0" width="5.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="952.0" y="1198.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 1.89%)</title><rect x="954.0" y="1187.0" width="22.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="957.0" y="1198.0">[..</text>
</g>
<g>
<title>[unknown] (9 samples, 1.89%)</title><rect x="954.0" y="1171.0" width="22.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="957.0" y="1182.0">[..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.42%)</title><rect x="954.0" y="1155.0" width="5.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="957.0" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.21%)</title><rect x="954.0" y="1139.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.0" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (1 samples, 0.21%)</title><rect x="956.5" y="1139.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.5" y="1150.0"></text>
</g>
<g>
<title>__GI___recv (3 samples, 0.63%)</title><rect x="959.0" y="1155.0" width="7.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="962.0" y="1166.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.21%)</title><rect x="966.4" y="1155.0" width="2.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="969.4" y="1166.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.63%)</title><rect x="968.9" y="1155.0" width="7.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="971.9" y="1166.0"></text>
</g>
<g>
<title>__GI___recv (10 samples, 2.11%)</title><rect x="976.4" y="1187.0" width="24.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="979.4" y="1198.0">_..</text>
</g>
<g>
<title>[unknown] (10 samples, 2.11%)</title><rect x="976.4" y="1171.0" width="24.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="979.4" y="1182.0">[..</text>
</g>
<g>
<title>[unknown] (10 samples, 2.11%)</title><rect x="976.4" y="1155.0" width="24.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="979.4" y="1166.0">[..</text>
</g>
<g>
<title>[unknown] (8 samples, 1.68%)</title><rect x="981.3" y="1139.0" width="19.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="984.3" y="1150.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 1.68%)</title><rect x="981.3" y="1123.0" width="19.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="984.3" y="1134.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 1.47%)</title><rect x="983.8" y="1107.0" width="17.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="986.8" y="1118.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.05%)</title><rect x="988.8" y="1091.0" width="12.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="991.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 1.05%)</title><rect x="988.8" y="1075.0" width="12.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="991.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.84%)</title><rect x="991.3" y="1059.0" width="9.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="994.3" y="1070.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.63%)</title><rect x="993.7" y="1043.0" width="7.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="996.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="996.2" y="1027.0" width="5.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="999.2" y="1038.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.42%)</title><rect x="1001.2" y="1267.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1004.2" y="1278.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1251.0" width="5.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1004.2" y="1262.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1235.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1004.2" y="1246.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1219.0" width="5.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1004.2" y="1230.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1203.0" width="5.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1004.2" y="1214.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1187.0" width="5.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1004.2" y="1198.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1171.0" width="5.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1004.2" y="1182.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1155.0" width="5.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1004.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.42%)</title><rect x="1001.2" y="1139.0" width="5.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1004.2" y="1150.0"></text>
</g>
<g>
<title>start_thread (74 samples, 15.58%)</title><rect x="1006.2" y="1267.0" width="183.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1009.2" y="1278.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 15.58%)</title><rect x="1006.2" y="1251.0" width="183.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1009.2" y="1262.0">thread_native_entry(Thre..</text>
</g>
<g>
<title>Thread::call_run() (74 samples, 15.58%)</title><rect x="1006.2" y="1235.0" width="183.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.2" y="1246.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.63%)</title><rect x="1006.2" y="1219.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.2" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.42%)</title><rect x="1006.2" y="1203.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.2" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.21%)</title><rect x="1006.2" y="1187.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.2" y="1198.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.21%)</title><rect x="1006.2" y="1171.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1009.2" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.21%)</title><rect x="1008.7" y="1187.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1011.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.21%)</title><rect x="1008.7" y="1171.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.7" y="1182.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.21%)</title><rect x="1008.7" y="1155.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1011.7" y="1166.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.21%)</title><rect x="1008.7" y="1139.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1011.7" y="1150.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.21%)</title><rect x="1008.7" y="1123.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.7" y="1134.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.21%)</title><rect x="1008.7" y="1107.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1011.7" y="1118.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.21%)</title><rect x="1011.1" y="1203.0" width="2.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1014.1" y="1214.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1011.1" y="1187.0" width="2.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1014.1" y="1198.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1011.1" y="1171.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1014.1" y="1182.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1011.1" y="1155.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1014.1" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1011.1" y="1139.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1014.1" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (70 samples, 14.74%)</title><rect x="1013.6" y="1219.0" width="173.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.6" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (70 samples, 14.74%)</title><rect x="1013.6" y="1203.0" width="173.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1016.6" y="1214.0">JavaThread::thread_mai..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (69 samples, 14.53%)</title><rect x="1013.6" y="1187.0" width="171.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.6" y="1198.0">CompileBroker::compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (68 samples, 14.32%)</title><rect x="1013.6" y="1171.0" width="168.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.6" y="1182.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (59 samples, 12.42%)</title><rect x="1013.6" y="1155.0" width="146.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.6" y="1166.0">C2Compiler::compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (59 samples, 12.42%)</title><rect x="1013.6" y="1139.0" width="146.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.6" y="1150.0">Compile::Compile(c..</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 6.74%)</title><rect x="1013.6" y="1123.0" width="79.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.6" y="1134.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.21%)</title><rect x="1013.6" y="1107.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.6" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.21%)</title><rect x="1013.6" y="1091.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.6" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.21%)</title><rect x="1016.1" y="1107.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1019.1" y="1118.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.21%)</title><rect x="1016.1" y="1091.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.1" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.21%)</title><rect x="1016.1" y="1075.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1019.1" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.21%)</title><rect x="1016.1" y="1059.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1019.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.84%)</title><rect x="1018.6" y="1107.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.6" y="1118.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.84%)</title><rect x="1018.6" y="1091.0" width="9.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.6" y="1102.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.42%)</title><rect x="1021.1" y="1075.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.1" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.21%)</title><rect x="1021.1" y="1059.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.21%)</title><rect x="1021.1" y="1043.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.1" y="1054.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.21%)</title><rect x="1021.1" y="1027.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.1" y="1038.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.21%)</title><rect x="1021.1" y="1011.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.1" y="1022.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.21%)</title><rect x="1023.6" y="1059.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.6" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.21%)</title><rect x="1023.6" y="1043.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1026.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.21%)</title><rect x="1023.6" y="1027.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.6" y="1038.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.21%)</title><rect x="1023.6" y="1011.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.6" y="1022.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.21%)</title><rect x="1023.6" y="995.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1026.6" y="1006.0"></text>
</g>
<g>
<title>StartNode::match(ProjNode const*, Matcher const*) (1 samples, 0.21%)</title><rect x="1026.0" y="1075.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1029.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.84%)</title><rect x="1028.5" y="1107.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.21%)</title><rect x="1028.5" y="1091.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1031.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.21%)</title><rect x="1028.5" y="1075.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.5" y="1086.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.21%)</title><rect x="1028.5" y="1059.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.63%)</title><rect x="1031.0" y="1091.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.21%)</title><rect x="1031.0" y="1075.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.21%)</title><rect x="1031.0" y="1059.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.21%)</title><rect x="1033.5" y="1075.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.21%)</title><rect x="1033.5" y="1059.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.5" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.21%)</title><rect x="1036.0" y="1075.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.0" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.21%)</title><rect x="1036.0" y="1059.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.0" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.21%)</title><rect x="1038.5" y="1107.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 4.42%)</title><rect x="1040.9" y="1107.0" width="52.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1043.9" y="1118.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.21%)</title><rect x="1040.9" y="1091.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.21%)</title><rect x="1040.9" y="1075.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.9" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="1040.9" y="1059.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.63%)</title><rect x="1043.4" y="1091.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 1.47%)</title><rect x="1050.9" y="1091.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.9" y="1102.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.21%)</title><rect x="1053.4" y="1075.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.4" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.21%)</title><rect x="1055.9" y="1075.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.21%)</title><rect x="1058.3" y="1075.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.63%)</title><rect x="1060.8" y="1075.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="1063.3" y="1059.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.3" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.21%)</title><rect x="1065.8" y="1059.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.21%)</title><rect x="1068.3" y="1091.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.21%)</title><rect x="1068.3" y="1075.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.21%)</title><rect x="1070.8" y="1091.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.8" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.21%)</title><rect x="1070.8" y="1075.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (1 samples, 0.21%)</title><rect x="1073.2" y="1091.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.42%)</title><rect x="1075.7" y="1091.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.21%)</title><rect x="1080.7" y="1091.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.7" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.21%)</title><rect x="1080.7" y="1075.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.21%)</title><rect x="1080.7" y="1059.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.21%)</title><rect x="1083.2" y="1091.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.2" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.21%)</title><rect x="1083.2" y="1075.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.2" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.42%)</title><rect x="1085.7" y="1091.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.7" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.21%)</title><rect x="1088.1" y="1075.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.1" y="1086.0"></text>
</g>
<g>
<title>__memset_erms (1 samples, 0.21%)</title><rect x="1090.6" y="1091.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1093.6" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="1075.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1093.6" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="1059.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1093.6" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="1043.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1093.6" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="1027.0" width="2.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1093.6" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="1011.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1093.6" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="995.0" width="2.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1093.6" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="979.0" width="2.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1093.6" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1090.6" y="963.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1093.6" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 2.53%)</title><rect x="1093.1" y="1123.0" width="29.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="1134.0">Co..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.256] (1 samples, 0.21%)</title><rect x="1093.1" y="1107.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.21%)</title><rect x="1093.1" y="1091.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1096.1" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.21%)</title><rect x="1093.1" y="1075.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.1" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.21%)</title><rect x="1093.1" y="1059.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.1" y="1070.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.21%)</title><rect x="1093.1" y="1043.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (9 samples, 1.89%)</title><rect x="1095.6" y="1107.0" width="22.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.6" y="1118.0">P..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (2 samples, 0.42%)</title><rect x="1095.6" y="1091.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.42%)</title><rect x="1100.6" y="1091.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.21%)</title><rect x="1103.1" y="1075.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.142] (1 samples, 0.21%)</title><rect x="1105.5" y="1091.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.21%)</title><rect x="1105.5" y="1075.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.21%)</title><rect x="1105.5" y="1059.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.21%)</title><rect x="1105.5" y="1043.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.21%)</title><rect x="1105.5" y="1027.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.5" y="1038.0"></text>
</g>
<g>
<title>Conv2BNode::Opcode() const (1 samples, 0.21%)</title><rect x="1105.5" y="1011.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.42%)</title><rect x="1108.0" y="1091.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.0" y="1102.0"></text>
</g>
<g>
<title>ConNNode::Opcode() const (1 samples, 0.21%)</title><rect x="1110.5" y="1075.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.42%)</title><rect x="1113.0" y="1091.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.0" y="1102.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1113.0" y="1075.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.0" y="1086.0"></text>
</g>
<g>
<title>Opaque1Node::bottom_type() const (1 samples, 0.21%)</title><rect x="1115.5" y="1075.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.42%)</title><rect x="1118.0" y="1107.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.42%)</title><rect x="1118.0" y="1091.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.0" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1118.0" y="1075.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.0" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1120.4" y="1075.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.4" y="1086.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1120.4" y="1059.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.4" y="1070.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.239] (1 samples, 0.21%)</title><rect x="1120.4" y="1043.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.4" y="1054.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.21%)</title><rect x="1120.4" y="1027.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.4" y="1038.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.21%)</title><rect x="1120.4" y="1011.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.4" y="1022.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.21%)</title><rect x="1120.4" y="995.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 2.95%)</title><rect x="1122.9" y="1123.0" width="34.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.9" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 2.95%)</title><rect x="1122.9" y="1107.0" width="34.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.9" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 2.95%)</title><rect x="1122.9" y="1091.0" width="34.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 2.95%)</title><rect x="1122.9" y="1075.0" width="34.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.9" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 2.95%)</title><rect x="1122.9" y="1059.0" width="34.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.9" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (14 samples, 2.95%)</title><rect x="1122.9" y="1043.0" width="34.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.9" y="1054.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.42%)</title><rect x="1122.9" y="1027.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.9" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.21%)</title><rect x="1122.9" y="1011.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.9" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.21%)</title><rect x="1122.9" y="995.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.21%)</title><rect x="1122.9" y="979.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.21%)</title><rect x="1122.9" y="963.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.21%)</title><rect x="1122.9" y="947.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.9" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.21%)</title><rect x="1122.9" y="931.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.9" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.21%)</title><rect x="1122.9" y="915.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.21%)</title><rect x="1122.9" y="899.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.21%)</title><rect x="1122.9" y="883.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.21%)</title><rect x="1122.9" y="867.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1122.9" y="851.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1122.9" y="835.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.9" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1122.9" y="819.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.9" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1122.9" y="803.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1122.9" y="787.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.9" y="798.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.21%)</title><rect x="1122.9" y="771.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.9" y="782.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.21%)</title><rect x="1122.9" y="755.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.9" y="766.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.21%)</title><rect x="1122.9" y="739.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.21%)</title><rect x="1125.4" y="1011.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.4" y="1022.0"></text>
</g>
<g>
<title>ciMethod::code_size_for_inlining() (1 samples, 0.21%)</title><rect x="1125.4" y="995.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 2.11%)</title><rect x="1127.9" y="1027.0" width="24.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="1038.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 2.11%)</title><rect x="1127.9" y="1011.0" width="24.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 1.89%)</title><rect x="1127.9" y="995.0" width="22.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.9" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 1.89%)</title><rect x="1127.9" y="979.0" width="22.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 1.89%)</title><rect x="1127.9" y="963.0" width="22.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.9" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 1.68%)</title><rect x="1127.9" y="947.0" width="19.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.9" y="958.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.21%)</title><rect x="1127.9" y="931.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.9" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::would_improve_type(ciKlass*, int) const (1 samples, 0.21%)</title><rect x="1127.9" y="915.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="926.0"></text>
</g>
<g>
<title>TypePtr::speculative_type() const (1 samples, 0.21%)</title><rect x="1127.9" y="899.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.9" y="910.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.21%)</title><rect x="1127.9" y="883.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.9" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.21%)</title><rect x="1127.9" y="867.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.9" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.21%)</title><rect x="1127.9" y="851.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.9" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.21%)</title><rect x="1127.9" y="835.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="846.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.21%)</title><rect x="1127.9" y="819.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="830.0"></text>
</g>
<g>
<title>TypePtr::eq(Type const*) const [clone .part.89] (1 samples, 0.21%)</title><rect x="1127.9" y="803.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.05%)</title><rect x="1130.4" y="931.0" width="12.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.05%)</title><rect x="1130.4" y="915.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.4" y="926.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.21%)</title><rect x="1130.4" y="899.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.4" y="910.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.21%)</title><rect x="1130.4" y="883.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.4" y="894.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.21%)</title><rect x="1130.4" y="867.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.84%)</title><rect x="1132.9" y="899.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.84%)</title><rect x="1132.9" y="883.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.84%)</title><rect x="1132.9" y="867.0" width="9.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.63%)</title><rect x="1132.9" y="851.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.63%)</title><rect x="1132.9" y="835.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.63%)</title><rect x="1132.9" y="819.0" width="7.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.9" y="830.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.21%)</title><rect x="1132.9" y="803.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.9" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.21%)</title><rect x="1132.9" y="787.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.9" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.21%)</title><rect x="1132.9" y="771.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.9" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.21%)</title><rect x="1132.9" y="755.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.42%)</title><rect x="1135.3" y="803.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.42%)</title><rect x="1135.3" y="787.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.42%)</title><rect x="1135.3" y="771.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1135.3" y="755.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1135.3" y="739.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1135.3" y="723.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1135.3" y="707.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1135.3" y="691.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1135.3" y="675.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1135.3" y="659.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1135.3" y="643.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1135.3" y="627.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1135.3" y="611.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1135.3" y="595.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1135.3" y="579.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1135.3" y="563.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.3" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.21%)</title><rect x="1135.3" y="547.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.3" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.21%)</title><rect x="1135.3" y="531.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="542.0"></text>
</g>
<g>
<title>DirectiveSet::should_inline(ciMethod*) (1 samples, 0.21%)</title><rect x="1135.3" y="515.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.21%)</title><rect x="1137.8" y="755.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.21%)</title><rect x="1137.8" y="739.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.8" y="750.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.21%)</title><rect x="1137.8" y="723.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.8" y="734.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.21%)</title><rect x="1137.8" y="707.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_newarray(BasicType) (1 samples, 0.21%)</title><rect x="1140.3" y="851.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.3" y="862.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.21%)</title><rect x="1140.3" y="835.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.3" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.21%)</title><rect x="1140.3" y="819.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.3" y="830.0"></text>
</g>
<g>
<title>CMoveINode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1140.3" y="803.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.3" y="814.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.21%)</title><rect x="1140.3" y="787.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.3" y="798.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.21%)</title><rect x="1140.3" y="771.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.3" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.42%)</title><rect x="1142.8" y="931.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.8" y="942.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.21%)</title><rect x="1142.8" y="915.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.8" y="926.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.21%)</title><rect x="1142.8" y="899.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.8" y="910.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.21%)</title><rect x="1142.8" y="883.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="915.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="899.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="883.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="867.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="851.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="835.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="819.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="803.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="787.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="771.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="755.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="739.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="723.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="707.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="691.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="675.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="659.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="643.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="627.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="611.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="595.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="579.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="563.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="547.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.3" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="531.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="515.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="499.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="483.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="467.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="451.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="435.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="419.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="403.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="387.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="371.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="355.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="339.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1145.3" y="323.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1145.3" y="307.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1145.3" y="291.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1145.3" y="275.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1145.3" y="259.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1145.3" y="243.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.3" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.21%)</title><rect x="1145.3" y="227.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.3" y="238.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.21%)</title><rect x="1145.3" y="211.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1145.3" y="195.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="206.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1145.3" y="179.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.3" y="190.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.21%)</title><rect x="1145.3" y="163.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.21%)</title><rect x="1147.8" y="947.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.21%)</title><rect x="1147.8" y="931.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.8" y="942.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.21%)</title><rect x="1147.8" y="915.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.8" y="926.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.21%)</title><rect x="1147.8" y="899.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1150.8" y="910.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.21%)</title><rect x="1150.3" y="995.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.3" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.42%)</title><rect x="1152.7" y="1027.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.42%)</title><rect x="1152.7" y="1011.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.42%)</title><rect x="1152.7" y="995.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.42%)</title><rect x="1152.7" y="979.0" width="5.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.42%)</title><rect x="1152.7" y="963.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.42%)</title><rect x="1152.7" y="947.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.42%)</title><rect x="1152.7" y="931.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.42%)</title><rect x="1152.7" y="915.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.42%)</title><rect x="1152.7" y="899.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.42%)</title><rect x="1152.7" y="883.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.42%)</title><rect x="1152.7" y="867.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.42%)</title><rect x="1152.7" y="851.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.42%)</title><rect x="1152.7" y="835.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.42%)</title><rect x="1152.7" y="819.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.42%)</title><rect x="1152.7" y="803.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.42%)</title><rect x="1152.7" y="787.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.42%)</title><rect x="1152.7" y="771.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.42%)</title><rect x="1152.7" y="755.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.42%)</title><rect x="1152.7" y="739.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1152.7" y="723.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1152.7" y="707.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1152.7" y="691.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1152.7" y="675.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1152.7" y="659.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1152.7" y="643.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1152.7" y="627.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1152.7" y="611.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1152.7" y="595.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1152.7" y="579.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1152.7" y="563.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1152.7" y="547.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.21%)</title><rect x="1152.7" y="531.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="542.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.21%)</title><rect x="1152.7" y="515.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.7" y="526.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.21%)</title><rect x="1152.7" y="499.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.7" y="510.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.21%)</title><rect x="1152.7" y="483.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="494.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap const&amp;) (1 samples, 0.21%)</title><rect x="1152.7" y="467.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.7" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="723.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="707.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="691.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="675.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="659.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="643.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.2" y="627.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.2" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="611.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="595.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="579.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="563.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="547.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="531.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.2" y="515.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="499.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="483.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="467.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="451.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="435.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.2" y="419.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="403.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="387.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="371.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="355.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="339.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.2" y="323.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="307.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="291.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="275.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="259.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="243.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.2" y="227.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="211.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="195.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="179.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="163.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="147.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.21%)</title><rect x="1155.2" y="131.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.21%)</title><rect x="1155.2" y="115.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.2" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.21%)</title><rect x="1155.2" y="99.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.21%)</title><rect x="1155.2" y="83.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.21%)</title><rect x="1155.2" y="67.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.21%)</title><rect x="1155.2" y="51.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="62.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.21%)</title><rect x="1155.2" y="35.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.2" y="46.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.21%)</title><rect x="1157.7" y="1123.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.7" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.21%)</title><rect x="1157.7" y="1107.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.7" y="1118.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.21%)</title><rect x="1157.7" y="1091.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.7" y="1102.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.21%)</title><rect x="1157.7" y="1075.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.7" y="1086.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.21%)</title><rect x="1157.7" y="1059.0" width="2.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1160.7" y="1070.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="1043.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1160.7" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="1027.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1160.7" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="1011.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1160.7" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="995.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1160.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="979.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1160.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="963.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1160.7" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="947.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1160.7" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="931.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1160.7" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.21%)</title><rect x="1157.7" y="915.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1160.7" y="926.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (9 samples, 1.89%)</title><rect x="1160.2" y="1155.0" width="22.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.2" y="1166.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (9 samples, 1.89%)</title><rect x="1160.2" y="1139.0" width="22.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="1150.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (9 samples, 1.89%)</title><rect x="1160.2" y="1123.0" width="22.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="1134.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (9 samples, 1.89%)</title><rect x="1160.2" y="1107.0" width="22.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.2" y="1118.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (7 samples, 1.47%)</title><rect x="1160.2" y="1091.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (6 samples, 1.26%)</title><rect x="1160.2" y="1075.0" width="14.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (6 samples, 1.26%)</title><rect x="1160.2" y="1059.0" width="14.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (6 samples, 1.26%)</title><rect x="1160.2" y="1043.0" width="14.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.2" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 1.26%)</title><rect x="1160.2" y="1027.0" width="14.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.2" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 1.26%)</title><rect x="1160.2" y="1011.0" width="14.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.2" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 1.26%)</title><rect x="1160.2" y="995.0" width="14.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.2" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.84%)</title><rect x="1160.2" y="979.0" width="9.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.2" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.84%)</title><rect x="1160.2" y="963.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.2" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.84%)</title><rect x="1160.2" y="947.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.84%)</title><rect x="1160.2" y="931.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.84%)</title><rect x="1160.2" y="915.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.2" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.63%)</title><rect x="1160.2" y="899.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.2" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.63%)</title><rect x="1160.2" y="883.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.42%)</title><rect x="1160.2" y="867.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.42%)</title><rect x="1160.2" y="851.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.2" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.42%)</title><rect x="1160.2" y="835.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.2" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1160.2" y="819.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.21%)</title><rect x="1160.2" y="803.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1160.2" y="787.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.2" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.21%)</title><rect x="1160.2" y="771.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.21%)</title><rect x="1160.2" y="755.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.2" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.21%)</title><rect x="1160.2" y="739.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="750.0"></text>
</g>
<g>
<title>XHandlers::XHandlers(ciMethod*) (1 samples, 0.21%)</title><rect x="1160.2" y="723.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="734.0"></text>
</g>
<g>
<title>ciMethod::load_code() (1 samples, 0.21%)</title><rect x="1160.2" y="707.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.2" y="718.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.21%)</title><rect x="1162.7" y="819.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1162.7" y="803.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1162.7" y="787.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.7" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1162.7" y="771.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1162.7" y="755.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.7" y="766.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1162.7" y="739.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.7" y="750.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.21%)</title><rect x="1162.7" y="723.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.7" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.21%)</title><rect x="1162.7" y="707.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1162.7" y="691.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.21%)</title><rect x="1162.7" y="675.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.7" y="686.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) [clone .constprop.380] (1 samples, 0.21%)</title><rect x="1165.2" y="867.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="878.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.21%)</title><rect x="1165.2" y="851.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.2" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.21%)</title><rect x="1167.6" y="899.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.6" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1167.6" y="883.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.6" y="894.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.21%)</title><rect x="1167.6" y="867.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.6" y="878.0"></text>
</g>
<g>
<title>Invoke::Invoke(Bytecodes::Code, ValueType*, Instruction*, GrowableArray&lt;Instruction*&gt;*, int, ciMethod*, ValueStack*) (1 samples, 0.21%)</title><rect x="1170.1" y="979.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.21%)</title><rect x="1172.6" y="979.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1172.6" y="963.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1172.6" y="947.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.21%)</title><rect x="1172.6" y="931.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.21%)</title><rect x="1172.6" y="915.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.21%)</title><rect x="1175.1" y="1075.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.1" y="1086.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.21%)</title><rect x="1175.1" y="1059.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.1" y="1070.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.21%)</title><rect x="1175.1" y="1043.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.42%)</title><rect x="1177.6" y="1091.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="1102.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.21%)</title><rect x="1177.6" y="1075.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1086.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.21%)</title><rect x="1177.6" y="1059.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.21%)</title><rect x="1177.6" y="1043.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="1054.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.21%)</title><rect x="1180.1" y="1075.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.1" y="1086.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.21%)</title><rect x="1180.1" y="1059.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="1070.0"></text>
</g>
<g>
<title>LinearScan::add_def(LIR_OprDesc*, int, IntervalUseKind) (1 samples, 0.21%)</title><rect x="1180.1" y="1043.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.21%)</title><rect x="1182.5" y="1171.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="1182.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.21%)</title><rect x="1182.5" y="1155.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="1166.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.21%)</title><rect x="1185.0" y="1187.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="1198.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.21%)</title><rect x="1185.0" y="1171.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="1182.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.21%)</title><rect x="1185.0" y="1155.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="1166.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.21%)</title><rect x="1185.0" y="1139.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.21%)</title><rect x="1185.0" y="1123.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.21%)</title><rect x="1185.0" y="1107.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.0" y="1118.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.21%)</title><rect x="1187.5" y="1219.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="1230.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.21%)</title><rect x="1187.5" y="1203.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="1214.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.21%)</title><rect x="1187.5" y="1187.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="1198.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.21%)</title><rect x="1187.5" y="1171.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="1182.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.21%)</title><rect x="1187.5" y="1155.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="1166.0"></text>
</g>
</g>
</svg>
