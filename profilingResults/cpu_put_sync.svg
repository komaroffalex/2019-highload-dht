<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (565 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.18%)</title><rect x="10.0" y="899.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.18%)</title><rect x="10.0" y="883.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (1 samples, 0.18%)</title><rect x="10.0" y="867.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.35%)</title><rect x="12.1" y="899.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.1" y="910.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.35%)</title><rect x="12.1" y="883.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.1" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.18%)</title><rect x="12.1" y="867.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.1" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (1 samples, 0.18%)</title><rect x="14.2" y="867.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.2" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.18%)</title><rect x="14.2" y="851.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.2" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.18%)</title><rect x="14.2" y="835.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="14.2" y="819.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="17.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="14.2" y="803.0" width="2.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="17.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="14.2" y="787.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="14.2" y="771.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="17.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="14.2" y="755.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="17.2" y="766.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.18%)</title><rect x="16.3" y="899.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="19.3" y="910.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.18%)</title><rect x="16.3" y="883.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.3" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.18%)</title><rect x="16.3" y="867.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.3" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="18.4" y="899.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>__vsscanf (1 samples, 0.18%)</title><rect x="18.4" y="883.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>_pthread_cleanup_pop_restore (1 samples, 0.18%)</title><rect x="18.4" y="867.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="21.4" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.88%)</title><rect x="20.4" y="899.0" width="10.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="23.4" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="24.6" y="883.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="27.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="24.6" y="867.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="27.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="24.6" y="851.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="27.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="24.6" y="835.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="27.6" y="846.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.35%)</title><rect x="26.7" y="883.0" width="4.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="29.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="867.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="29.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="851.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="29.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="835.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="29.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="819.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="29.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="803.0" width="4.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="29.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="787.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="29.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="771.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="29.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="26.7" y="755.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="29.7" y="766.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.18%)</title><rect x="30.9" y="899.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="33.9" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (6 samples, 1.06%)</title><rect x="33.0" y="899.0" width="12.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="36.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 1.06%)</title><rect x="33.0" y="883.0" width="12.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="36.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 1.06%)</title><rect x="33.0" y="867.0" width="12.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="36.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.88%)</title><rect x="35.1" y="851.0" width="10.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="38.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.88%)</title><rect x="35.1" y="835.0" width="10.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="38.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.88%)</title><rect x="35.1" y="819.0" width="10.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="38.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.53%)</title><rect x="39.2" y="803.0" width="6.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="42.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="43.4" y="787.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="46.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="43.4" y="771.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="46.4" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (492 samples, 87.08%)</title><rect x="45.5" y="899.0" width="1027.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.5" y="910.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.35%)</title><rect x="104.0" y="883.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="883.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="111.2" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="867.0" width="2.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="111.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="851.0" width="2.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="111.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="835.0" width="2.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="111.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="819.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="111.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="803.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="111.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="108.2" y="787.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="111.2" y="798.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (2 samples, 0.35%)</title><rect x="110.2" y="883.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.2" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.35%)</title><rect x="114.4" y="883.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.4" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.18%)</title><rect x="116.5" y="867.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (81 samples, 14.34%)</title><rect x="118.6" y="883.0" width="169.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.6" y="894.0">one/nio/net/NativeSele..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (5 samples, 0.88%)</title><rect x="124.9" y="867.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.53%)</title><rect x="129.0" y="851.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (73 samples, 12.92%)</title><rect x="135.3" y="867.0" width="152.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.3" y="878.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.35%)</title><rect x="145.8" y="851.0" width="4.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="148.8" y="862.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 11.50%)</title><rect x="149.9" y="851.0" width="135.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="152.9" y="862.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="149.9" y="835.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="152.9" y="846.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.18%)</title><rect x="149.9" y="819.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="152.9" y="830.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.18%)</title><rect x="152.0" y="835.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="155.0" y="846.0"></text>
</g>
<g>
<title>epoll_wait (63 samples, 11.15%)</title><rect x="154.1" y="835.0" width="131.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="157.1" y="846.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (48 samples, 8.50%)</title><rect x="185.4" y="819.0" width="100.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="188.4" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (48 samples, 8.50%)</title><rect x="185.4" y="803.0" width="100.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="188.4" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (46 samples, 8.14%)</title><rect x="189.6" y="787.0" width="96.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="192.6" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (46 samples, 8.14%)</title><rect x="189.6" y="771.0" width="96.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="192.6" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (46 samples, 8.14%)</title><rect x="189.6" y="755.0" width="96.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="192.6" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (39 samples, 6.90%)</title><rect x="204.2" y="739.0" width="81.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="207.2" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (31 samples, 5.49%)</title><rect x="220.9" y="723.0" width="64.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="223.9" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (28 samples, 4.96%)</title><rect x="227.2" y="707.0" width="58.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="230.2" y="718.0">[unkno..</text>
</g>
<g>
<title>[unknown] (25 samples, 4.42%)</title><rect x="233.5" y="691.0" width="52.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="236.5" y="702.0">[unkn..</text>
</g>
<g>
<title>[unknown] (18 samples, 3.19%)</title><rect x="248.1" y="675.0" width="37.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="251.1" y="686.0">[un..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="659.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="286.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="643.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="286.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="627.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="286.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="611.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="286.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="595.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="286.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="579.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="286.6" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="283.6" y="563.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="286.6" y="574.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.18%)</title><rect x="285.7" y="851.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="288.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (376 samples, 66.55%)</title><rect x="287.8" y="883.0" width="785.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.8" y="894.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="867.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="294.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="851.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="294.9" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="835.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="294.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="819.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="294.9" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="803.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="294.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="787.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="294.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="291.9" y="771.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="294.9" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (373 samples, 66.02%)</title><rect x="294.0" y="867.0" width="779.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="297.0" y="878.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (325 samples, 57.52%)</title><rect x="296.1" y="851.0" width="678.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.1" y="862.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (299 samples, 52.92%)</title><rect x="298.2" y="835.0" width="624.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.2" y="846.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (298 samples, 52.74%)</title><rect x="300.3" y="819.0" width="622.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.3" y="830.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (293 samples, 51.86%)</title><rect x="302.4" y="803.0" width="611.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.4" y="814.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (165 samples, 29.20%)</title><rect x="304.5" y="787.0" width="344.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.5" y="798.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.53%)</title><rect x="306.6" y="771.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.18%)</title><rect x="310.7" y="755.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="310.7" y="739.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="313.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="310.7" y="723.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="313.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="310.7" y="707.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="313.7" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (159 samples, 28.14%)</title><rect x="312.8" y="771.0" width="332.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.8" y="782.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 2.30%)</title><rect x="312.8" y="755.0" width="27.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.8" y="766.0">o..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.53%)</title><rect x="319.1" y="739.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="723.0" width="2.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="326.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="707.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="326.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="691.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="326.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="675.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="326.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="659.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="326.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="643.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="326.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="627.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="326.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="323.3" y="611.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="326.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 1.24%)</title><rect x="325.4" y="739.0" width="14.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.35%)</title><rect x="325.4" y="723.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.88%)</title><rect x="329.5" y="723.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="332.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.53%)</title><rect x="333.7" y="707.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.35%)</title><rect x="335.8" y="691.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.35%)</title><rect x="335.8" y="675.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.8" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (146 samples, 25.84%)</title><rect x="340.0" y="755.0" width="304.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.0" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (146 samples, 25.84%)</title><rect x="340.0" y="739.0" width="304.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.0" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (144 samples, 25.49%)</title><rect x="344.2" y="723.0" width="300.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="347.2" y="734.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (144 samples, 25.49%)</title><rect x="344.2" y="707.0" width="300.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.2" y="718.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (8 samples, 1.42%)</title><rect x="346.2" y="691.0" width="16.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="349.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 1.42%)</title><rect x="346.2" y="675.0" width="16.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="349.2" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 1.06%)</title><rect x="346.2" y="659.0" width="12.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="349.2" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.71%)</title><rect x="350.4" y="643.0" width="8.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="353.4" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.18%)</title><rect x="356.7" y="627.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="359.7" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="358.8" y="659.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="361.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="358.8" y="643.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="361.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="358.8" y="627.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="361.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="358.8" y="611.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="361.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="358.8" y="595.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="361.8" y="606.0"></text>
</g>
<g>
<title>__send (1 samples, 0.18%)</title><rect x="360.9" y="659.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="363.9" y="670.0"></text>
</g>
<g>
<title>__send (135 samples, 23.89%)</title><rect x="363.0" y="691.0" width="281.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="366.0" y="702.0">__send</text>
</g>
<g>
<title>[unknown] (131 samples, 23.19%)</title><rect x="371.3" y="675.0" width="273.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="374.3" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (131 samples, 23.19%)</title><rect x="371.3" y="659.0" width="273.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="374.3" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (127 samples, 22.48%)</title><rect x="379.7" y="643.0" width="265.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="382.7" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (127 samples, 22.48%)</title><rect x="379.7" y="627.0" width="265.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="382.7" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (126 samples, 22.30%)</title><rect x="381.8" y="611.0" width="263.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="384.8" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (126 samples, 22.30%)</title><rect x="381.8" y="595.0" width="263.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="384.8" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (126 samples, 22.30%)</title><rect x="381.8" y="579.0" width="263.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="384.8" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (126 samples, 22.30%)</title><rect x="381.8" y="563.0" width="263.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="384.8" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (122 samples, 21.59%)</title><rect x="390.1" y="547.0" width="254.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="393.1" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (117 samples, 20.71%)</title><rect x="400.5" y="531.0" width="244.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="403.5" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (115 samples, 20.35%)</title><rect x="404.7" y="515.0" width="240.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="407.7" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (111 samples, 19.65%)</title><rect x="413.1" y="499.0" width="231.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="416.1" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (103 samples, 18.23%)</title><rect x="429.8" y="483.0" width="215.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="432.8" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (102 samples, 18.05%)</title><rect x="431.9" y="467.0" width="213.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="434.9" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (99 samples, 17.52%)</title><rect x="438.1" y="451.0" width="206.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="441.1" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (98 samples, 17.35%)</title><rect x="440.2" y="435.0" width="204.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="443.2" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (97 samples, 17.17%)</title><rect x="442.3" y="419.0" width="202.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="445.3" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (96 samples, 16.99%)</title><rect x="444.4" y="403.0" width="200.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="447.4" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (91 samples, 16.11%)</title><rect x="454.8" y="387.0" width="190.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="457.8" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (89 samples, 15.75%)</title><rect x="459.0" y="371.0" width="185.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="462.0" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (85 samples, 15.04%)</title><rect x="467.4" y="355.0" width="177.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="470.4" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (80 samples, 14.16%)</title><rect x="477.8" y="339.0" width="167.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="480.8" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (77 samples, 13.63%)</title><rect x="484.1" y="323.0" width="160.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="487.1" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (73 samples, 12.92%)</title><rect x="492.4" y="307.0" width="152.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="495.4" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (73 samples, 12.92%)</title><rect x="492.4" y="291.0" width="152.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="495.4" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (72 samples, 12.74%)</title><rect x="494.5" y="275.0" width="150.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="497.5" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (72 samples, 12.74%)</title><rect x="494.5" y="259.0" width="150.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="497.5" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (72 samples, 12.74%)</title><rect x="494.5" y="243.0" width="150.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="497.5" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (69 samples, 12.21%)</title><rect x="500.8" y="227.0" width="144.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="503.8" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (69 samples, 12.21%)</title><rect x="500.8" y="211.0" width="144.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="503.8" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (69 samples, 12.21%)</title><rect x="500.8" y="195.0" width="144.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="503.8" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (67 samples, 11.86%)</title><rect x="505.0" y="179.0" width="139.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="508.0" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (60 samples, 10.62%)</title><rect x="519.6" y="163.0" width="125.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="522.6" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (58 samples, 10.27%)</title><rect x="523.8" y="147.0" width="121.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="526.8" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (52 samples, 9.20%)</title><rect x="536.3" y="131.0" width="108.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="539.3" y="142.0">[unknown]</text>
</g>
<g>
<title>[unknown] (47 samples, 8.32%)</title><rect x="546.7" y="115.0" width="98.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="549.7" y="126.0">[unknown]</text>
</g>
<g>
<title>[unknown] (37 samples, 6.55%)</title><rect x="567.6" y="99.0" width="77.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="570.6" y="110.0">[unknown]</text>
</g>
<g>
<title>[unknown] (34 samples, 6.02%)</title><rect x="573.9" y="83.0" width="71.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="576.9" y="94.0">[unknown]</text>
</g>
<g>
<title>[unknown] (33 samples, 5.84%)</title><rect x="576.0" y="67.0" width="68.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="579.0" y="78.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="642.8" y="51.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="645.8" y="62.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="642.8" y="35.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="645.8" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.35%)</title><rect x="644.9" y="771.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.35%)</title><rect x="644.9" y="755.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.18%)</title><rect x="644.9" y="739.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.18%)</title><rect x="647.0" y="739.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.18%)</title><rect x="647.0" y="723.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="650.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.71%)</title><rect x="649.1" y="787.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.18%)</title><rect x="653.3" y="771.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.18%)</title><rect x="653.3" y="755.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="656.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.18%)</title><rect x="655.3" y="771.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="658.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/HttpService.entity (123 samples, 21.77%)</title><rect x="657.4" y="787.0" width="256.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.4" y="798.0">ru/mail/polis/service/HttpService...</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.53%)</title><rect x="657.4" y="771.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.53%)</title><rect x="657.4" y="755.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.53%)</title><rect x="657.4" y="739.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.hasNegatives (1 samples, 0.18%)</title><rect x="659.5" y="723.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.5" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.18%)</title><rect x="661.6" y="723.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="664.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.18%)</title><rect x="663.7" y="771.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.7" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.18%)</title><rect x="663.7" y="755.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.7" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.18%)</title><rect x="663.7" y="739.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/HttpService.processResponse (119 samples, 21.06%)</title><rect x="665.8" y="771.0" width="248.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.8" y="782.0">ru/mail/polis/service/HttpService..</text>
</g>
<g>
<title>ru/mail/polis/service/HttpService.putMethodWrapper (119 samples, 21.06%)</title><rect x="665.8" y="755.0" width="248.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.8" y="766.0">ru/mail/polis/service/HttpService..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.35%)</title><rect x="665.8" y="739.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.35%)</title><rect x="665.8" y="723.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.8" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.35%)</title><rect x="665.8" y="707.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.35%)</title><rect x="665.8" y="691.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.8" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.35%)</title><rect x="665.8" y="675.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="668.8" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.35%)</title><rect x="665.8" y="659.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="668.8" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.35%)</title><rect x="665.8" y="643.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.8" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.35%)</title><rect x="665.8" y="627.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.upsert (117 samples, 20.71%)</title><rect x="670.0" y="739.0" width="244.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.0" y="750.0">ru/mail/polis/dao/DAORocksDB.ups..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (112 samples, 19.82%)</title><rect x="672.1" y="723.0" width="233.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.1" y="734.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (112 samples, 19.82%)</title><rect x="672.1" y="707.0" width="233.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.1" y="718.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25 (2 samples, 0.35%)</title><rect x="674.1" y="691.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="677.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.71%)</title><rect x="678.3" y="691.0" width="8.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="681.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="678.3" y="675.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="681.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="678.3" y="659.0" width="2.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="681.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="678.3" y="643.0" width="2.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="681.3" y="654.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (2 samples, 0.35%)</title><rect x="680.4" y="675.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="683.4" y="686.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.18%)</title><rect x="684.6" y="675.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="687.6" y="686.0"></text>
</g>
<g>
<title>__malloc (3 samples, 0.53%)</title><rect x="686.7" y="691.0" width="6.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="689.7" y="702.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.35%)</title><rect x="692.9" y="691.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="695.9" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.18%)</title><rect x="697.1" y="691.0" width="2.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="700.1" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.18%)</title><rect x="699.2" y="691.0" width="2.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="702.2" y="702.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.35%)</title><rect x="701.3" y="691.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="704.3" y="702.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.18%)</title><rect x="705.5" y="691.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="708.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.18%)</title><rect x="707.6" y="691.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="710.6" y="702.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (93 samples, 16.46%)</title><rect x="709.6" y="691.0" width="194.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="712.6" y="702.0">rocksdb_put_helper(JNIEnv..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.18%)</title><rect x="709.6" y="675.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="712.6" y="686.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.35%)</title><rect x="711.7" y="675.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="714.7" y="686.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.18%)</title><rect x="715.9" y="675.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="718.9" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.35%)</title><rect x="718.0" y="675.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="721.0" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.35%)</title><rect x="718.0" y="659.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="721.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (86 samples, 15.22%)</title><rect x="722.2" y="675.0" width="179.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="725.2" y="686.0">rocksdb::DB::Put(rocksd..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (86 samples, 15.22%)</title><rect x="722.2" y="659.0" width="179.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="725.2" y="670.0">rocksdb::DBImpl::Put(ro..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (84 samples, 14.87%)</title><rect x="722.2" y="643.0" width="175.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="725.2" y="654.0">rocksdb::DB::Put(rocksd..</text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.18%)</title><rect x="722.2" y="627.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="725.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.18%)</title><rect x="724.3" y="627.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (71 samples, 12.57%)</title><rect x="726.4" y="627.0" width="148.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="729.4" y="638.0">rocksdb::DBImpl::Wr..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.18%)</title><rect x="726.4" y="611.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="729.4" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.18%)</title><rect x="728.4" y="611.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="731.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (64 samples, 11.33%)</title><rect x="730.5" y="611.0" width="133.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.5" y="622.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.35%)</title><rect x="749.3" y="595.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="752.3" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.88%)</title><rect x="753.5" y="595.0" width="10.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="756.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="579.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="764.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="563.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="764.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="547.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="764.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="531.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="764.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="515.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="764.9" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="499.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="764.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="761.9" y="483.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="764.9" y="494.0"></text>
</g>
<g>
<title>_init (1 samples, 0.18%)</title><rect x="763.9" y="595.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="766.9" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.35%)</title><rect x="766.0" y="595.0" width="4.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="769.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.18%)</title><rect x="770.2" y="595.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.18%)</title><rect x="772.3" y="595.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="775.3" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.18%)</title><rect x="772.3" y="579.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="775.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.35%)</title><rect x="774.4" y="595.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="777.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (39 samples, 6.90%)</title><rect x="778.6" y="595.0" width="81.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="781.6" y="606.0">rocksdb::..</text>
</g>
<g>
<title>_init (1 samples, 0.18%)</title><rect x="782.7" y="579.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="785.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.18%)</title><rect x="784.8" y="579.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="787.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (35 samples, 6.19%)</title><rect x="786.9" y="579.0" width="73.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="789.9" y="590.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 5.31%)</title><rect x="791.1" y="563.0" width="62.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="794.1" y="574.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.18%)</title><rect x="791.1" y="547.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="794.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (29 samples, 5.13%)</title><rect x="793.2" y="547.0" width="60.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="796.2" y="558.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni9217509787605964326.so (3 samples, 0.53%)</title><rect x="795.3" y="531.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="798.3" y="542.0"></text>
</g>
<g>
<title>_init (2 samples, 0.35%)</title><rect x="801.5" y="531.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="804.5" y="542.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.18%)</title><rect x="805.7" y="531.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.18%)</title><rect x="807.8" y="531.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="810.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (19 samples, 3.36%)</title><rect x="809.9" y="531.0" width="39.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.9" y="542.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni9217509787605964326.so (5 samples, 0.88%)</title><rect x="814.1" y="515.0" width="10.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="817.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.53%)</title><rect x="818.2" y="499.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (1 samples, 0.18%)</title><rect x="822.4" y="483.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.4" y="494.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (11 samples, 1.95%)</title><rect x="824.5" y="515.0" width="23.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="827.5" y="526.0">b..</text>
</g>
<g>
<title>/tmp/librocksdbjni9217509787605964326.so (10 samples, 1.77%)</title><rect x="826.6" y="499.0" width="20.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="829.6" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni9217509787605964326.so (2 samples, 0.35%)</title><rect x="837.0" y="483.0" width="4.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="840.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.35%)</title><rect x="837.0" y="467.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.0" y="478.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni9217509787605964326.so (1 samples, 0.18%)</title><rect x="839.1" y="451.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="842.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.53%)</title><rect x="841.2" y="483.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.2" y="494.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (2 samples, 0.35%)</title><rect x="841.2" y="467.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="844.2" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="845.4" y="467.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="848.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.18%)</title><rect x="847.5" y="515.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.35%)</title><rect x="849.6" y="531.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="852.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.18%)</title><rect x="853.8" y="563.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.35%)</title><rect x="855.8" y="563.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="858.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (1 samples, 0.18%)</title><rect x="860.0" y="595.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="863.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.18%)</title><rect x="862.1" y="595.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="865.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (2 samples, 0.35%)</title><rect x="864.2" y="611.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.18%)</title><rect x="868.4" y="611.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="871.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.35%)</title><rect x="870.5" y="611.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="873.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 1.24%)</title><rect x="874.6" y="627.0" width="14.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.18%)</title><rect x="874.6" y="611.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="877.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.35%)</title><rect x="876.7" y="611.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.53%)</title><rect x="880.9" y="611.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="883.9" y="622.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.18%)</title><rect x="885.1" y="595.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, int) (1 samples, 0.18%)</title><rect x="887.2" y="611.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.18%)</title><rect x="889.3" y="627.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="892.3" y="638.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (2 samples, 0.35%)</title><rect x="891.3" y="627.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.3" y="638.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (1 samples, 0.18%)</title><rect x="895.5" y="627.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.18%)</title><rect x="897.6" y="643.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="900.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.18%)</title><rect x="899.7" y="643.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="902.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.18%)</title><rect x="901.8" y="675.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.8" y="686.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.18%)</title><rect x="903.9" y="691.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.copyAndExtractFromByteBuffer (3 samples, 0.53%)</title><rect x="906.0" y="723.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="909.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.18%)</title><rect x="906.0" y="707.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="909.0" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.18%)</title><rect x="906.0" y="691.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="909.0" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.35%)</title><rect x="908.1" y="707.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.1" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.35%)</title><rect x="908.1" y="691.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.35%)</title><rect x="908.1" y="675.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="911.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="908.1" y="659.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="911.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="908.1" y="643.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="911.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="908.1" y="627.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="911.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="908.1" y="611.0" width="2.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="911.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.18%)</title><rect x="910.1" y="659.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.decompressKey (1 samples, 0.18%)</title><rect x="912.2" y="723.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAORocksDB.copyAndExtractFromByteBuffer (1 samples, 0.18%)</title><rect x="912.2" y="707.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="915.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.18%)</title><rect x="912.2" y="691.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.53%)</title><rect x="914.3" y="803.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="917.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.53%)</title><rect x="914.3" y="787.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.18%)</title><rect x="914.3" y="771.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="917.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.18%)</title><rect x="914.3" y="755.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="917.3" y="766.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.18%)</title><rect x="914.3" y="739.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="917.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.35%)</title><rect x="916.4" y="771.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="919.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.35%)</title><rect x="916.4" y="755.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="919.4" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.18%)</title><rect x="916.4" y="739.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.18%)</title><rect x="918.5" y="739.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.18%)</title><rect x="920.6" y="803.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.18%)</title><rect x="920.6" y="787.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="923.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.18%)</title><rect x="920.6" y="771.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.18%)</title><rect x="920.6" y="755.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.18%)</title><rect x="920.6" y="739.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 2.12%)</title><rect x="922.7" y="835.0" width="25.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="925.7" y="846.0">o..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="926.8" y="819.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="929.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="926.8" y="803.0" width="4.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="929.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="926.8" y="787.0" width="4.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="929.8" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.35%)</title><rect x="926.8" y="771.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="929.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="928.9" y="755.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="931.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="928.9" y="739.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="931.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="928.9" y="723.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="931.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.53%)</title><rect x="931.0" y="819.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="933.1" y="803.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="936.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="933.1" y="787.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="936.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="933.1" y="771.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="936.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="933.1" y="755.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="936.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="933.1" y="739.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="936.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="933.1" y="723.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="936.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.18%)</title><rect x="935.2" y="803.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="938.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.18%)</title><rect x="935.2" y="787.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.18%)</title><rect x="935.2" y="771.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="938.2" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.53%)</title><rect x="937.3" y="819.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="940.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.53%)</title><rect x="937.3" y="803.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.35%)</title><rect x="939.4" y="787.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.18%)</title><rect x="939.4" y="771.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="942.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.18%)</title><rect x="941.5" y="771.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.18%)</title><rect x="941.5" y="755.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="944.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.18%)</title><rect x="941.5" y="739.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="944.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.35%)</title><rect x="943.6" y="819.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="946.6" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 1.06%)</title><rect x="947.7" y="835.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 1.06%)</title><rect x="947.7" y="819.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="950.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 1.06%)</title><rect x="947.7" y="803.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.53%)</title><rect x="951.9" y="787.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="954.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.53%)</title><rect x="951.9" y="771.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="954.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.18%)</title><rect x="958.2" y="787.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="961.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.18%)</title><rect x="958.2" y="771.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="961.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.88%)</title><rect x="960.3" y="835.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="963.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.53%)</title><rect x="962.4" y="819.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="965.4" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.53%)</title><rect x="962.4" y="803.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="965.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.35%)</title><rect x="962.4" y="787.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.18%)</title><rect x="964.4" y="771.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="967.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.18%)</title><rect x="966.5" y="787.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="969.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.18%)</title><rect x="966.5" y="771.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="969.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.18%)</title><rect x="968.6" y="819.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.6" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.18%)</title><rect x="968.6" y="803.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="971.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.18%)</title><rect x="968.6" y="787.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.35%)</title><rect x="970.7" y="835.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="973.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.35%)</title><rect x="970.7" y="819.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="973.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.35%)</title><rect x="970.7" y="803.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="973.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (2 samples, 0.35%)</title><rect x="970.7" y="787.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="973.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (47 samples, 8.32%)</title><rect x="974.9" y="851.0" width="98.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="977.9" y="862.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (46 samples, 8.14%)</title><rect x="974.9" y="835.0" width="96.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="977.9" y="846.0">one/nio/net..</text>
</g>
<g>
<title>[unknown] (15 samples, 2.65%)</title><rect x="983.2" y="819.0" width="31.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="986.2" y="830.0">[u..</text>
</g>
<g>
<title>[unknown] (15 samples, 2.65%)</title><rect x="983.2" y="803.0" width="31.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="986.2" y="814.0">[u..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (13 samples, 2.30%)</title><rect x="983.2" y="787.0" width="27.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="986.2" y="798.0">J..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.18%)</title><rect x="983.2" y="771.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.2" y="782.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (4 samples, 0.71%)</title><rect x="985.3" y="771.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="988.3" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 1.42%)</title><rect x="993.7" y="771.0" width="16.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="996.7" y="782.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.35%)</title><rect x="997.9" y="755.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.9" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.53%)</title><rect x="1002.0" y="755.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.0" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.18%)</title><rect x="1008.3" y="755.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1011.3" y="766.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.18%)</title><rect x="1008.3" y="739.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.3" y="750.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.35%)</title><rect x="1010.4" y="787.0" width="4.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1013.4" y="798.0"></text>
</g>
<g>
<title>__GI___recv (27 samples, 4.78%)</title><rect x="1014.6" y="819.0" width="56.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1017.6" y="830.0">__GI__..</text>
</g>
<g>
<title>[unknown] (26 samples, 4.60%)</title><rect x="1016.7" y="803.0" width="54.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1019.7" y="814.0">[unkn..</text>
</g>
<g>
<title>[unknown] (26 samples, 4.60%)</title><rect x="1016.7" y="787.0" width="54.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1019.7" y="798.0">[unkn..</text>
</g>
<g>
<title>[unknown] (24 samples, 4.25%)</title><rect x="1020.8" y="771.0" width="50.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1023.8" y="782.0">[unkn..</text>
</g>
<g>
<title>[unknown] (24 samples, 4.25%)</title><rect x="1020.8" y="755.0" width="50.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1023.8" y="766.0">[unkn..</text>
</g>
<g>
<title>[unknown] (21 samples, 3.72%)</title><rect x="1027.1" y="739.0" width="43.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1030.1" y="750.0">[unk..</text>
</g>
<g>
<title>[unknown] (20 samples, 3.54%)</title><rect x="1029.2" y="723.0" width="41.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1032.2" y="734.0">[un..</text>
</g>
<g>
<title>[unknown] (18 samples, 3.19%)</title><rect x="1033.4" y="707.0" width="37.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1036.4" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (16 samples, 2.83%)</title><rect x="1037.5" y="691.0" width="33.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1040.5" y="702.0">[u..</text>
</g>
<g>
<title>[unknown] (11 samples, 1.95%)</title><rect x="1048.0" y="675.0" width="23.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1051.0" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (6 samples, 1.06%)</title><rect x="1058.4" y="659.0" width="12.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1061.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.53%)</title><rect x="1064.7" y="643.0" width="6.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1067.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="627.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1071.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="611.0" width="2.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1071.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="595.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1071.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="579.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1071.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="563.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1071.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="547.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1071.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="1068.9" y="531.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1071.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.18%)</title><rect x="1071.0" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1074.0" y="846.0"></text>
</g>
<g>
<title>start_thread (56 samples, 9.91%)</title><rect x="1073.0" y="899.0" width="117.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1076.0" y="910.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (56 samples, 9.91%)</title><rect x="1073.0" y="883.0" width="117.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1076.0" y="894.0">thread_native_..</text>
</g>
<g>
<title>Thread::call_run() (56 samples, 9.91%)</title><rect x="1073.0" y="867.0" width="117.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.0" y="878.0">Thread::call_r..</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.18%)</title><rect x="1073.0" y="851.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.0" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.18%)</title><rect x="1073.0" y="835.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.0" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.18%)</title><rect x="1073.0" y="819.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.0" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.18%)</title><rect x="1073.0" y="803.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1076.0" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (55 samples, 9.73%)</title><rect x="1075.1" y="851.0" width="114.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.1" y="862.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (55 samples, 9.73%)</title><rect x="1075.1" y="835.0" width="114.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.1" y="846.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (55 samples, 9.73%)</title><rect x="1075.1" y="819.0" width="114.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="830.0">CompileBroker:..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (54 samples, 9.56%)</title><rect x="1075.1" y="803.0" width="112.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.1" y="814.0">CompileBroker:..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (48 samples, 8.50%)</title><rect x="1075.1" y="787.0" width="100.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.1" y="798.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (48 samples, 8.50%)</title><rect x="1075.1" y="771.0" width="100.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.1" y="782.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (25 samples, 4.42%)</title><rect x="1075.1" y="755.0" width="52.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.1" y="766.0">Compi..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.35%)</title><rect x="1075.1" y="739.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.1" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.35%)</title><rect x="1075.1" y="723.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.1" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.35%)</title><rect x="1075.1" y="707.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.18%)</title><rect x="1077.2" y="691.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.2" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.18%)</title><rect x="1077.2" y="675.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.2" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.18%)</title><rect x="1077.2" y="659.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.2" y="670.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.18%)</title><rect x="1077.2" y="643.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.2" y="654.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.18%)</title><rect x="1077.2" y="627.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.2" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 1.06%)</title><rect x="1079.3" y="739.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 1.06%)</title><rect x="1079.3" y="723.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.3" y="734.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::ideal_Opcode() const (1 samples, 0.18%)</title><rect x="1079.3" y="707.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.53%)</title><rect x="1081.4" y="707.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.4" y="718.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.18%)</title><rect x="1083.5" y="691.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.18%)</title><rect x="1085.6" y="691.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.6" y="702.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.18%)</title><rect x="1085.6" y="675.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1088.6" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.18%)</title><rect x="1087.7" y="707.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.7" y="718.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.18%)</title><rect x="1089.8" y="707.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 2.83%)</title><rect x="1091.8" y="739.0" width="33.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.8" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.35%)</title><rect x="1091.8" y="723.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.8" y="734.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.18%)</title><rect x="1093.9" y="707.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.18%)</title><rect x="1096.0" y="723.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.18%)</title><rect x="1098.1" y="723.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.1" y="734.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.18%)</title><rect x="1098.1" y="707.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.53%)</title><rect x="1100.2" y="723.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.53%)</title><rect x="1100.2" y="707.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.35%)</title><rect x="1102.3" y="691.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.35%)</title><rect x="1106.5" y="723.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.5" y="734.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.18%)</title><rect x="1108.5" y="707.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.35%)</title><rect x="1110.6" y="723.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.18%)</title><rect x="1112.7" y="707.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.35%)</title><rect x="1114.8" y="723.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.8" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.18%)</title><rect x="1119.0" y="723.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.0" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.18%)</title><rect x="1119.0" y="707.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.0" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.18%)</title><rect x="1119.0" y="691.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.0" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.18%)</title><rect x="1121.1" y="723.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.1" y="734.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.18%)</title><rect x="1121.1" y="707.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.1" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.18%)</title><rect x="1123.2" y="723.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.2" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.18%)</title><rect x="1123.2" y="707.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="1123.2" y="691.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.2" y="702.0"></text>
</g>
<g>
<title>RetNode::ideal_Opcode() const (1 samples, 0.18%)</title><rect x="1125.3" y="739.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.3" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 2.83%)</title><rect x="1127.3" y="755.0" width="33.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.3" y="766.0">Co..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.256] (1 samples, 0.18%)</title><rect x="1127.3" y="739.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.18%)</title><rect x="1127.3" y="723.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.18%)</title><rect x="1127.3" y="707.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.3" y="718.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.18%)</title><rect x="1127.3" y="691.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.3" y="702.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.18%)</title><rect x="1127.3" y="675.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.35%)</title><rect x="1129.4" y="739.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.35%)</title><rect x="1129.4" y="723.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="1131.5" y="707.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="1131.5" y="691.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.5" y="702.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.18%)</title><rect x="1131.5" y="675.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.5" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.18%)</title><rect x="1133.6" y="739.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.6" y="750.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.18%)</title><rect x="1133.6" y="723.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.6" y="734.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.18%)</title><rect x="1133.6" y="707.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.6" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.18%)</title><rect x="1135.7" y="739.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.7" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.18%)</title><rect x="1135.7" y="723.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (10 samples, 1.77%)</title><rect x="1137.8" y="739.0" width="20.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.8" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1137.8" y="723.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.8" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1137.8" y="707.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.8" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1137.8" y="691.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.8" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1137.8" y="675.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.8" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.18%)</title><rect x="1137.8" y="659.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.8" y="670.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.18%)</title><rect x="1139.9" y="723.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.18%)</title><rect x="1142.0" y="723.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.18%)</title><rect x="1144.1" y="723.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.1" y="734.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.18%)</title><rect x="1144.1" y="707.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.71%)</title><rect x="1146.1" y="723.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.35%)</title><rect x="1148.2" y="707.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.35%)</title><rect x="1148.2" y="691.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.35%)</title><rect x="1148.2" y="675.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.2" y="686.0"></text>
</g>
<g>
<title>StrCompressedCopyNode::Opcode() const (1 samples, 0.18%)</title><rect x="1152.4" y="707.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.18%)</title><rect x="1154.5" y="723.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.18%)</title><rect x="1154.5" y="707.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.18%)</title><rect x="1156.6" y="723.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.18%)</title><rect x="1156.6" y="707.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="718.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.18%)</title><rect x="1156.6" y="691.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.6" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.18%)</title><rect x="1156.6" y="675.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.18%)</title><rect x="1158.7" y="739.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.18%)</title><rect x="1158.7" y="723.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="734.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.18%)</title><rect x="1158.7" y="707.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="718.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.18%)</title><rect x="1158.7" y="691.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.24%)</title><rect x="1160.8" y="755.0" width="14.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.24%)</title><rect x="1160.8" y="739.0" width="14.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.24%)</title><rect x="1160.8" y="723.0" width="14.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.24%)</title><rect x="1160.8" y="707.0" width="14.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.24%)</title><rect x="1160.8" y="691.0" width="14.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.24%)</title><rect x="1160.8" y="675.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.18%)</title><rect x="1160.8" y="659.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.18%)</title><rect x="1160.8" y="643.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.8" y="654.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.18%)</title><rect x="1160.8" y="627.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.88%)</title><rect x="1162.8" y="659.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.88%)</title><rect x="1162.8" y="643.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.71%)</title><rect x="1162.8" y="627.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.71%)</title><rect x="1162.8" y="611.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.71%)</title><rect x="1162.8" y="595.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.53%)</title><rect x="1162.8" y="579.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="590.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1162.8" y="563.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="574.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.18%)</title><rect x="1162.8" y="547.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) [clone .part.165] (1 samples, 0.18%)</title><rect x="1162.8" y="531.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>LibraryCallKit::make_unsafe_address(Node*&amp;, Node*, BasicType, bool) (1 samples, 0.18%)</title><rect x="1162.8" y="515.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool, bool) (1 samples, 0.18%)</title><rect x="1162.8" y="499.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="510.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.18%)</title><rect x="1162.8" y="483.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.8" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.18%)</title><rect x="1162.8" y="467.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="478.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.18%)</title><rect x="1162.8" y="451.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.18%)</title><rect x="1162.8" y="435.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="446.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.18%)</title><rect x="1162.8" y="419.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.18%)</title><rect x="1162.8" y="403.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.18%)</title><rect x="1162.8" y="387.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="398.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.18%)</title><rect x="1162.8" y="371.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.35%)</title><rect x="1164.9" y="563.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.35%)</title><rect x="1164.9" y="547.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.35%)</title><rect x="1164.9" y="531.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.35%)</title><rect x="1164.9" y="515.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.35%)</title><rect x="1164.9" y="499.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.35%)</title><rect x="1164.9" y="483.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.35%)</title><rect x="1164.9" y="467.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.35%)</title><rect x="1164.9" y="451.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.35%)</title><rect x="1164.9" y="435.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.35%)</title><rect x="1164.9" y="419.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.35%)</title><rect x="1164.9" y="403.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.35%)</title><rect x="1164.9" y="387.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.35%)</title><rect x="1164.9" y="371.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.35%)</title><rect x="1164.9" y="355.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.35%)</title><rect x="1164.9" y="339.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.35%)</title><rect x="1164.9" y="323.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.35%)</title><rect x="1164.9" y="307.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.35%)</title><rect x="1164.9" y="291.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1164.9" y="275.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1164.9" y="259.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1164.9" y="243.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1164.9" y="227.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1164.9" y="211.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="222.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.18%)</title><rect x="1164.9" y="195.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.9" y="206.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.18%)</title><rect x="1164.9" y="179.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="190.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.18%)</title><rect x="1164.9" y="163.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.18%)</title><rect x="1167.0" y="275.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.18%)</title><rect x="1169.1" y="579.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.18%)</title><rect x="1169.1" y="563.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="574.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.18%)</title><rect x="1169.1" y="547.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.18%)</title><rect x="1169.1" y="531.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.1" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.18%)</title><rect x="1169.1" y="515.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.18%)</title><rect x="1169.1" y="499.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.18%)</title><rect x="1171.2" y="627.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.18%)</title><rect x="1171.2" y="611.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>MulNode::Ideal(PhaseGVN*, bool) (1 samples, 0.18%)</title><rect x="1171.2" y="595.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.18%)</title><rect x="1171.2" y="579.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="590.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.18%)</title><rect x="1171.2" y="563.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1173.3" y="659.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1173.3" y="643.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1173.3" y="627.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1173.3" y="611.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1173.3" y="595.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1173.3" y="579.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1173.3" y="563.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1173.3" y="547.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1173.3" y="531.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1173.3" y="515.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1173.3" y="499.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1173.3" y="483.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1173.3" y="467.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1173.3" y="451.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1173.3" y="435.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1173.3" y="419.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1173.3" y="403.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1173.3" y="387.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1173.3" y="371.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1173.3" y="355.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1173.3" y="339.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1173.3" y="323.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1173.3" y="307.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1173.3" y="291.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1173.3" y="275.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1173.3" y="259.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1173.3" y="243.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1173.3" y="227.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1173.3" y="211.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1173.3" y="195.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.18%)</title><rect x="1173.3" y="179.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.18%)</title><rect x="1173.3" y="163.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="174.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.18%)</title><rect x="1173.3" y="147.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="158.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.18%)</title><rect x="1173.3" y="131.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="142.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.18%)</title><rect x="1173.3" y="115.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.3" y="126.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.18%)</title><rect x="1173.3" y="99.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="110.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.18%)</title><rect x="1173.3" y="83.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="94.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.88%)</title><rect x="1175.4" y="787.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 0.88%)</title><rect x="1175.4" y="771.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 0.88%)</title><rect x="1175.4" y="755.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 0.88%)</title><rect x="1175.4" y="739.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (3 samples, 0.53%)</title><rect x="1175.4" y="723.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="734.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.18%)</title><rect x="1175.4" y="707.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>ValueMap::ValueMap(ValueMap*) (1 samples, 0.18%)</title><rect x="1175.4" y="691.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.18%)</title><rect x="1175.4" y="675.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1178.4" y="686.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.35%)</title><rect x="1177.5" y="707.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.35%)</title><rect x="1177.5" y="691.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.35%)</title><rect x="1177.5" y="675.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.35%)</title><rect x="1177.5" y="659.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.35%)</title><rect x="1177.5" y="643.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.35%)</title><rect x="1177.5" y="627.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.35%)</title><rect x="1177.5" y="611.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.35%)</title><rect x="1177.5" y="595.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1177.5" y="579.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1177.5" y="563.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.18%)</title><rect x="1177.5" y="547.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1177.5" y="531.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1177.5" y="515.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.18%)</title><rect x="1177.5" y="499.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.18%)</title><rect x="1177.5" y="483.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.18%)</title><rect x="1177.5" y="467.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1177.5" y="451.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.18%)</title><rect x="1177.5" y="435.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="446.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.18%)</title><rect x="1177.5" y="419.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.5" y="430.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.18%)</title><rect x="1177.5" y="403.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="414.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.18%)</title><rect x="1177.5" y="387.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="398.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.18%)</title><rect x="1177.5" y="371.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="382.0"></text>
</g>
<g>
<title>MethodData::initialize() (1 samples, 0.18%)</title><rect x="1177.5" y="355.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="366.0"></text>
</g>
<g>
<title>MethodData::post_initialize(BytecodeStream*) (1 samples, 0.18%)</title><rect x="1177.5" y="339.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="350.0"></text>
</g>
<g>
<title>JumpData::post_initialize(BytecodeStream*, MethodData*) (1 samples, 0.18%)</title><rect x="1177.5" y="323.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="334.0"></text>
</g>
<g>
<title>MethodData::bci_to_dp(int) (1 samples, 0.18%)</title><rect x="1177.5" y="307.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.5" y="318.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.18%)</title><rect x="1177.5" y="291.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.18%)</title><rect x="1177.5" y="275.0" width="2.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1180.5" y="286.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.18%)</title><rect x="1179.6" y="579.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="590.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.18%)</title><rect x="1179.6" y="563.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="574.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.18%)</title><rect x="1179.6" y="547.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="558.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.18%)</title><rect x="1179.6" y="531.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.35%)</title><rect x="1181.6" y="723.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.35%)</title><rect x="1181.6" y="707.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="718.0"></text>
</g>
<g>
<title>Compilation::debug_info_recorder() const (1 samples, 0.18%)</title><rect x="1181.6" y="691.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.18%)</title><rect x="1183.7" y="691.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.18%)</title><rect x="1183.7" y="675.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.18%)</title><rect x="1185.8" y="787.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.18%)</title><rect x="1185.8" y="771.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1185.8" y="755.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1185.8" y="739.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.18%)</title><rect x="1185.8" y="723.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="734.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.18%)</title><rect x="1185.8" y="707.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="718.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.18%)</title><rect x="1185.8" y="691.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="702.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (1 samples, 0.18%)</title><rect x="1187.9" y="803.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>os::available_memory() (1 samples, 0.18%)</title><rect x="1187.9" y="787.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>OSContainer::memory_limit_in_bytes() (1 samples, 0.18%)</title><rect x="1187.9" y="771.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>__strncat_chk (1 samples, 0.18%)</title><rect x="1187.9" y="755.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
</g>
</svg>
